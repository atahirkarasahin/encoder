
caps_23_7_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c4  20000000  08004070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200c4  2**0
                  CONTENTS
  8 .bss          00000320  200000c4  200000c4  000200c4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200003e4  200003e4  000200c4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018210  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002e10  00000000  00000000  00038304  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000079c9  00000000  00000000  0003b114  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  00042ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  00043618  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005f0e  00000000  00000000  00044400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000479c  00000000  00000000  0004a30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004eaaa  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000260c  00000000  00000000  0004eb28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fc4 	.word	0x08003fc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	08003fc4 	.word	0x08003fc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a58:	f000 b97a 	b.w	8000d50 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	468c      	mov	ip, r1
 8000a7a:	460d      	mov	r5, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	9e08      	ldr	r6, [sp, #32]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d151      	bne.n	8000b28 <__udivmoddi4+0xb4>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d96d      	bls.n	8000b66 <__udivmoddi4+0xf2>
 8000a8a:	fab2 fe82 	clz	lr, r2
 8000a8e:	f1be 0f00 	cmp.w	lr, #0
 8000a92:	d00b      	beq.n	8000aac <__udivmoddi4+0x38>
 8000a94:	f1ce 0c20 	rsb	ip, lr, #32
 8000a98:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a9c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000aa0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000aa4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000aa8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000aac:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ab0:	0c25      	lsrs	r5, r4, #16
 8000ab2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ab6:	fa1f f987 	uxth.w	r9, r7
 8000aba:	fb0a cc18 	mls	ip, sl, r8, ip
 8000abe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ac2:	fb08 f309 	mul.w	r3, r8, r9
 8000ac6:	42ab      	cmp	r3, r5
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x6c>
 8000aca:	19ed      	adds	r5, r5, r7
 8000acc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000ad0:	f080 8123 	bcs.w	8000d1a <__udivmoddi4+0x2a6>
 8000ad4:	42ab      	cmp	r3, r5
 8000ad6:	f240 8120 	bls.w	8000d1a <__udivmoddi4+0x2a6>
 8000ada:	f1a8 0802 	sub.w	r8, r8, #2
 8000ade:	443d      	add	r5, r7
 8000ae0:	1aed      	subs	r5, r5, r3
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ae8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000aec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000af0:	fb00 f909 	mul.w	r9, r0, r9
 8000af4:	45a1      	cmp	r9, r4
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x98>
 8000af8:	19e4      	adds	r4, r4, r7
 8000afa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000afe:	f080 810a 	bcs.w	8000d16 <__udivmoddi4+0x2a2>
 8000b02:	45a1      	cmp	r9, r4
 8000b04:	f240 8107 	bls.w	8000d16 <__udivmoddi4+0x2a2>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	443c      	add	r4, r7
 8000b0c:	eba4 0409 	sub.w	r4, r4, r9
 8000b10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b14:	2100      	movs	r1, #0
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d061      	beq.n	8000bde <__udivmoddi4+0x16a>
 8000b1a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b1e:	2300      	movs	r3, #0
 8000b20:	6034      	str	r4, [r6, #0]
 8000b22:	6073      	str	r3, [r6, #4]
 8000b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d907      	bls.n	8000b3c <__udivmoddi4+0xc8>
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d054      	beq.n	8000bda <__udivmoddi4+0x166>
 8000b30:	2100      	movs	r1, #0
 8000b32:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b36:	4608      	mov	r0, r1
 8000b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3c:	fab3 f183 	clz	r1, r3
 8000b40:	2900      	cmp	r1, #0
 8000b42:	f040 808e 	bne.w	8000c62 <__udivmoddi4+0x1ee>
 8000b46:	42ab      	cmp	r3, r5
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xdc>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80fa 	bhi.w	8000d44 <__udivmoddi4+0x2d0>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb65 0503 	sbc.w	r5, r5, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	46ac      	mov	ip, r5
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	d03f      	beq.n	8000bde <__udivmoddi4+0x16a>
 8000b5e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	b912      	cbnz	r2, 8000b6e <__udivmoddi4+0xfa>
 8000b68:	2701      	movs	r7, #1
 8000b6a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b6e:	fab7 fe87 	clz	lr, r7
 8000b72:	f1be 0f00 	cmp.w	lr, #0
 8000b76:	d134      	bne.n	8000be2 <__udivmoddi4+0x16e>
 8000b78:	1beb      	subs	r3, r5, r7
 8000b7a:	0c3a      	lsrs	r2, r7, #16
 8000b7c:	fa1f fc87 	uxth.w	ip, r7
 8000b80:	2101      	movs	r1, #1
 8000b82:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b86:	0c25      	lsrs	r5, r4, #16
 8000b88:	fb02 3318 	mls	r3, r2, r8, r3
 8000b8c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b90:	fb0c f308 	mul.w	r3, ip, r8
 8000b94:	42ab      	cmp	r3, r5
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x134>
 8000b98:	19ed      	adds	r5, r5, r7
 8000b9a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x132>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	f200 80d1 	bhi.w	8000d48 <__udivmoddi4+0x2d4>
 8000ba6:	4680      	mov	r8, r0
 8000ba8:	1aed      	subs	r5, r5, r3
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bb0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bb4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bb8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bbc:	45a4      	cmp	ip, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x15c>
 8000bc0:	19e4      	adds	r4, r4, r7
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x15a>
 8000bc8:	45a4      	cmp	ip, r4
 8000bca:	f200 80b8 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 040c 	sub.w	r4, r4, ip
 8000bd4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd8:	e79d      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000bda:	4631      	mov	r1, r6
 8000bdc:	4630      	mov	r0, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	f1ce 0420 	rsb	r4, lr, #32
 8000be6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bea:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bee:	fa20 f804 	lsr.w	r8, r0, r4
 8000bf2:	0c3a      	lsrs	r2, r7, #16
 8000bf4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bf8:	ea48 0803 	orr.w	r8, r8, r3
 8000bfc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c00:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c04:	fb02 4411 	mls	r4, r2, r1, r4
 8000c08:	fa1f fc87 	uxth.w	ip, r7
 8000c0c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c10:	fb01 f30c 	mul.w	r3, r1, ip
 8000c14:	42ab      	cmp	r3, r5
 8000c16:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x1bc>
 8000c1c:	19ed      	adds	r5, r5, r7
 8000c1e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000c22:	f080 808a 	bcs.w	8000d3a <__udivmoddi4+0x2c6>
 8000c26:	42ab      	cmp	r3, r5
 8000c28:	f240 8087 	bls.w	8000d3a <__udivmoddi4+0x2c6>
 8000c2c:	3902      	subs	r1, #2
 8000c2e:	443d      	add	r5, r7
 8000c30:	1aeb      	subs	r3, r5, r3
 8000c32:	fa1f f588 	uxth.w	r5, r8
 8000c36:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c3a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c3e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c42:	fb00 f30c 	mul.w	r3, r0, ip
 8000c46:	42ab      	cmp	r3, r5
 8000c48:	d907      	bls.n	8000c5a <__udivmoddi4+0x1e6>
 8000c4a:	19ed      	adds	r5, r5, r7
 8000c4c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c50:	d26f      	bcs.n	8000d32 <__udivmoddi4+0x2be>
 8000c52:	42ab      	cmp	r3, r5
 8000c54:	d96d      	bls.n	8000d32 <__udivmoddi4+0x2be>
 8000c56:	3802      	subs	r0, #2
 8000c58:	443d      	add	r5, r7
 8000c5a:	1aeb      	subs	r3, r5, r3
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	e78f      	b.n	8000b82 <__udivmoddi4+0x10e>
 8000c62:	f1c1 0720 	rsb	r7, r1, #32
 8000c66:	fa22 f807 	lsr.w	r8, r2, r7
 8000c6a:	408b      	lsls	r3, r1
 8000c6c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c70:	ea48 0303 	orr.w	r3, r8, r3
 8000c74:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c78:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c82:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c86:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c8a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c8e:	fa1f f883 	uxth.w	r8, r3
 8000c92:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c96:	fb09 f408 	mul.w	r4, r9, r8
 8000c9a:	42ac      	cmp	r4, r5
 8000c9c:	fa02 f201 	lsl.w	r2, r2, r1
 8000ca0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x244>
 8000ca6:	18ed      	adds	r5, r5, r3
 8000ca8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cac:	d243      	bcs.n	8000d36 <__udivmoddi4+0x2c2>
 8000cae:	42ac      	cmp	r4, r5
 8000cb0:	d941      	bls.n	8000d36 <__udivmoddi4+0x2c2>
 8000cb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cb6:	441d      	add	r5, r3
 8000cb8:	1b2d      	subs	r5, r5, r4
 8000cba:	fa1f fe8e 	uxth.w	lr, lr
 8000cbe:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cc2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000cc6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cca:	fb00 f808 	mul.w	r8, r0, r8
 8000cce:	45a0      	cmp	r8, r4
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x26e>
 8000cd2:	18e4      	adds	r4, r4, r3
 8000cd4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000cd8:	d229      	bcs.n	8000d2e <__udivmoddi4+0x2ba>
 8000cda:	45a0      	cmp	r8, r4
 8000cdc:	d927      	bls.n	8000d2e <__udivmoddi4+0x2ba>
 8000cde:	3802      	subs	r0, #2
 8000ce0:	441c      	add	r4, r3
 8000ce2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ce6:	eba4 0408 	sub.w	r4, r4, r8
 8000cea:	fba0 8902 	umull	r8, r9, r0, r2
 8000cee:	454c      	cmp	r4, r9
 8000cf0:	46c6      	mov	lr, r8
 8000cf2:	464d      	mov	r5, r9
 8000cf4:	d315      	bcc.n	8000d22 <__udivmoddi4+0x2ae>
 8000cf6:	d012      	beq.n	8000d1e <__udivmoddi4+0x2aa>
 8000cf8:	b156      	cbz	r6, 8000d10 <__udivmoddi4+0x29c>
 8000cfa:	ebba 030e 	subs.w	r3, sl, lr
 8000cfe:	eb64 0405 	sbc.w	r4, r4, r5
 8000d02:	fa04 f707 	lsl.w	r7, r4, r7
 8000d06:	40cb      	lsrs	r3, r1
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	40cc      	lsrs	r4, r1
 8000d0c:	6037      	str	r7, [r6, #0]
 8000d0e:	6074      	str	r4, [r6, #4]
 8000d10:	2100      	movs	r1, #0
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	4618      	mov	r0, r3
 8000d18:	e6f8      	b.n	8000b0c <__udivmoddi4+0x98>
 8000d1a:	4690      	mov	r8, r2
 8000d1c:	e6e0      	b.n	8000ae0 <__udivmoddi4+0x6c>
 8000d1e:	45c2      	cmp	sl, r8
 8000d20:	d2ea      	bcs.n	8000cf8 <__udivmoddi4+0x284>
 8000d22:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d26:	eb69 0503 	sbc.w	r5, r9, r3
 8000d2a:	3801      	subs	r0, #1
 8000d2c:	e7e4      	b.n	8000cf8 <__udivmoddi4+0x284>
 8000d2e:	4628      	mov	r0, r5
 8000d30:	e7d7      	b.n	8000ce2 <__udivmoddi4+0x26e>
 8000d32:	4640      	mov	r0, r8
 8000d34:	e791      	b.n	8000c5a <__udivmoddi4+0x1e6>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e7be      	b.n	8000cb8 <__udivmoddi4+0x244>
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	e778      	b.n	8000c30 <__udivmoddi4+0x1bc>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	e745      	b.n	8000bd0 <__udivmoddi4+0x15c>
 8000d44:	4608      	mov	r0, r1
 8000d46:	e708      	b.n	8000b5a <__udivmoddi4+0xe6>
 8000d48:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4c:	443d      	add	r5, r7
 8000d4e:	e72b      	b.n	8000ba8 <__udivmoddi4+0x134>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_InitTick+0x3c>)
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_InitTick+0x40>)
{
 8000d5a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d5c:	7818      	ldrb	r0, [r3, #0]
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d66:	6810      	ldr	r0, [r2, #0]
 8000d68:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d6c:	f000 fb0c 	bl	8001388 <HAL_SYSTICK_Config>
 8000d70:	4604      	mov	r4, r0
 8000d72:	b958      	cbnz	r0, 8000d8c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d74:	2d0f      	cmp	r5, #15
 8000d76:	d809      	bhi.n	8000d8c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d78:	4602      	mov	r2, r0
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d80:	f000 fac2 	bl	8001308 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_InitTick+0x44>)
 8000d86:	4620      	mov	r0, r4
 8000d88:	601d      	str	r5, [r3, #0]
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d8c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d8e:	bd38      	pop	{r3, r4, r5, pc}
 8000d90:	2000005c 	.word	0x2000005c
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_Init>:
{
 8000d9c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x30>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000da6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000db6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 fa93 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff ffc8 	bl	8000d54 <HAL_InitTick>
  HAL_MspInit();
 8000dc4:	f002 f93e 	bl	8003044 <HAL_MspInit>
}
 8000dc8:	2000      	movs	r0, #0
 8000dca:	bd08      	pop	{r3, pc}
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_IncTick+0x10>)
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <HAL_IncTick+0x14>)
 8000dd4:	6811      	ldr	r1, [r2, #0]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	440b      	add	r3, r1
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000174 	.word	0x20000174
 8000de4:	20000000 	.word	0x20000000

08000de8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000de8:	4b01      	ldr	r3, [pc, #4]	; (8000df0 <HAL_GetTick+0x8>)
 8000dea:	6818      	ldr	r0, [r3, #0]
}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000174 	.word	0x20000174

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b538      	push	{r3, r4, r5, lr}
 8000df6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff fff6 	bl	8000de8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfe:	bf1c      	itt	ne
 8000e00:	4b05      	ldrne	r3, [pc, #20]	; (8000e18 <HAL_Delay+0x24>)
 8000e02:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000e06:	bf18      	it	ne
 8000e08:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0a:	f7ff ffed 	bl	8000de8 <HAL_GetTick>
 8000e0e:	1b40      	subs	r0, r0, r5
 8000e10:	4284      	cmp	r4, r0
 8000e12:	d8fa      	bhi.n	8000e0a <HAL_Delay+0x16>
  {
  }
}
 8000e14:	bd38      	pop	{r3, r4, r5, pc}
 8000e16:	bf00      	nop
 8000e18:	20000000 	.word	0x20000000

08000e1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e1e:	4604      	mov	r4, r0
 8000e20:	2800      	cmp	r0, #0
 8000e22:	f000 8099 	beq.w	8000f58 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e28:	b923      	cbnz	r3, 8000e34 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e2a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e30:	f002 f938 	bl	80030a4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e36:	06db      	lsls	r3, r3, #27
 8000e38:	f100 808c 	bmi.w	8000f54 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e42:	f023 0302 	bic.w	r3, r3, #2
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000e4c:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <HAL_ADC_Init+0x140>)
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000e54:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	6861      	ldr	r1, [r4, #4]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e5e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e60:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e72:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e74:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e76:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e7a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e82:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e84:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e92:	4933      	ldr	r1, [pc, #204]	; (8000f60 <HAL_ADC_Init+0x144>)
 8000e94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e96:	428a      	cmp	r2, r1
 8000e98:	d050      	beq.n	8000f3c <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e9a:	6899      	ldr	r1, [r3, #8]
 8000e9c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000ea0:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ea2:	6899      	ldr	r1, [r3, #8]
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ea8:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000eaa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eb6:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000eb8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000eba:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ebc:	f022 0202 	bic.w	r2, r2, #2
 8000ec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000ec8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000eca:	6a22      	ldr	r2, [r4, #32]
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d03d      	beq.n	8000f4c <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ed0:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ed2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ed8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000ee0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	3901      	subs	r1, #1
 8000ee6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000eea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000eee:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ef0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef8:	3901      	subs	r1, #1
 8000efa:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f00:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000f02:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000f10:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f12:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f14:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f1c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000f1e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f20:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000f24:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000f26:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000f28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f2a:	f023 0303 	bic.w	r3, r3, #3
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000f34:	2300      	movs	r3, #0
 8000f36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000f3a:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f4a:	e7b4      	b.n	8000eb6 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f52:	e7ca      	b.n	8000eea <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000f54:	2001      	movs	r0, #1
 8000f56:	e7ed      	b.n	8000f34 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000f58:	2001      	movs	r0, #1
}
 8000f5a:	bd10      	pop	{r4, pc}
 8000f5c:	40012300 	.word	0x40012300
 8000f60:	0f000001 	.word	0x0f000001

08000f64 <HAL_ADC_Start_IT>:
{
 8000f64:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000f6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d054      	beq.n	800101c <HAL_ADC_Start_IT+0xb8>
 8000f72:	2301      	movs	r3, #1
 8000f74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f78:	6803      	ldr	r3, [r0, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	07d1      	lsls	r1, r2, #31
 8000f7e:	d505      	bpl.n	8000f8c <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	07d2      	lsls	r2, r2, #31
 8000f84:	d414      	bmi.n	8000fb0 <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 8000f86:	2000      	movs	r0, #0
}
 8000f88:	b002      	add	sp, #8
 8000f8a:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000f8c:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f8e:	4924      	ldr	r1, [pc, #144]	; (8001020 <HAL_ADC_Start_IT+0xbc>)
    __HAL_ADC_ENABLE(hadc);
 8000f90:	f042 0201 	orr.w	r2, r2, #1
 8000f94:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f96:	4a23      	ldr	r2, [pc, #140]	; (8001024 <HAL_ADC_Start_IT+0xc0>)
 8000f98:	6812      	ldr	r2, [r2, #0]
 8000f9a:	fbb2 f2f1 	udiv	r2, r2, r1
 8000f9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000fa2:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000fa4:	9a01      	ldr	r2, [sp, #4]
 8000fa6:	2a00      	cmp	r2, #0
 8000fa8:	d0ea      	beq.n	8000f80 <HAL_ADC_Start_IT+0x1c>
      counter--;
 8000faa:	9a01      	ldr	r2, [sp, #4]
 8000fac:	3a01      	subs	r2, #1
 8000fae:	e7f8      	b.n	8000fa2 <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000fb0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000fb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fbe:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fc4:	bf41      	itttt	mi
 8000fc6:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000fc8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000fcc:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000fd0:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fd2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fd8:	bf1c      	itt	ne
 8000fda:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000fdc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000fe0:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fe8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fec:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000ff4:	f042 0220 	orr.w	r2, r2, #32
 8000ff8:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_ADC_Start_IT+0xc4>)
 8000ffc:	6852      	ldr	r2, [r2, #4]
 8000ffe:	06d2      	lsls	r2, r2, #27
 8001000:	d108      	bne.n	8001014 <HAL_ADC_Start_IT+0xb0>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001002:	6898      	ldr	r0, [r3, #8]
 8001004:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001008:	d1bd      	bne.n	8000f86 <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	e7b9      	b.n	8000f88 <HAL_ADC_Start_IT+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <HAL_ADC_Start_IT+0xc8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d1b5      	bne.n	8000f86 <HAL_ADC_Start_IT+0x22>
 800101a:	e7f2      	b.n	8001002 <HAL_ADC_Start_IT+0x9e>
  __HAL_LOCK(hadc);
 800101c:	2002      	movs	r0, #2
 800101e:	e7b3      	b.n	8000f88 <HAL_ADC_Start_IT+0x24>
 8001020:	000f4240 	.word	0x000f4240
 8001024:	2000005c 	.word	0x2000005c
 8001028:	40012300 	.word	0x40012300
 800102c:	40012000 	.word	0x40012000

08001030 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001030:	6803      	ldr	r3, [r0, #0]
 8001032:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001034:	4770      	bx	lr

08001036 <HAL_ADC_LevelOutOfWindowCallback>:
 8001036:	4770      	bx	lr

08001038 <HAL_ADC_ErrorCallback>:
{
 8001038:	4770      	bx	lr

0800103a <HAL_ADC_IRQHandler>:
{
 800103a:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800103c:	6803      	ldr	r3, [r0, #0]
 800103e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001040:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001042:	078d      	lsls	r5, r1, #30
{
 8001044:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8001046:	d52b      	bpl.n	80010a0 <HAL_ADC_IRQHandler+0x66>
 8001048:	0690      	lsls	r0, r2, #26
 800104a:	d529      	bpl.n	80010a0 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800104c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800104e:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001050:	bf5e      	ittt	pl
 8001052:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8001054:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001058:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001060:	d117      	bne.n	8001092 <HAL_ADC_IRQHandler+0x58>
 8001062:	69a2      	ldr	r2, [r4, #24]
 8001064:	b9aa      	cbnz	r2, 8001092 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001068:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800106c:	d002      	beq.n	8001074 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800106e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001070:	0552      	lsls	r2, r2, #21
 8001072:	d40e      	bmi.n	8001092 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	f022 0220 	bic.w	r2, r2, #32
 800107a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800107c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800107e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001082:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001084:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001086:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001088:	bf5e      	ittt	pl
 800108a:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 800108c:	f043 0301 	orrpl.w	r3, r3, #1
 8001090:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001092:	4620      	mov	r0, r4
 8001094:	f001 fe9e 	bl	8002dd4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	f06f 0212 	mvn.w	r2, #18
 800109e:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80010a4:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80010a6:	074d      	lsls	r5, r1, #29
 80010a8:	d532      	bpl.n	8001110 <HAL_ADC_IRQHandler+0xd6>
 80010aa:	0610      	lsls	r0, r2, #24
 80010ac:	d530      	bpl.n	8001110 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010b0:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80010b2:	bf5e      	ittt	pl
 80010b4:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80010b6:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80010ba:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80010c2:	d11e      	bne.n	8001102 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010c6:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80010ca:	d002      	beq.n	80010d2 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010cc:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010ce:	0552      	lsls	r2, r2, #21
 80010d0:	d417      	bmi.n	8001102 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010d2:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010d4:	0555      	lsls	r5, r2, #21
 80010d6:	d414      	bmi.n	8001102 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010d8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010da:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80010de:	d110      	bne.n	8001102 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010e0:	69a2      	ldr	r2, [r4, #24]
 80010e2:	b972      	cbnz	r2, 8001102 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ea:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80010ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010f2:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f6:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010f8:	bf5e      	ittt	pl
 80010fa:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80010fc:	f043 0301 	orrpl.w	r3, r3, #1
 8001100:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001102:	4620      	mov	r0, r4
 8001104:	f000 f8c4 	bl	8001290 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	f06f 020c 	mvn.w	r2, #12
 800110e:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001114:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001116:	07c9      	lsls	r1, r1, #31
 8001118:	d50f      	bpl.n	800113a <HAL_ADC_IRQHandler+0x100>
 800111a:	0655      	lsls	r5, r2, #25
 800111c:	d50d      	bpl.n	800113a <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	07d8      	lsls	r0, r3, #31
 8001122:	d50a      	bpl.n	800113a <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001124:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112a:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800112c:	4620      	mov	r0, r4
 800112e:	f7ff ff82 	bl	8001036 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	f06f 0201 	mvn.w	r2, #1
 8001138:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800113a:	6823      	ldr	r3, [r4, #0]
 800113c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800113e:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001140:	0689      	lsls	r1, r1, #26
 8001142:	d50d      	bpl.n	8001160 <HAL_ADC_IRQHandler+0x126>
 8001144:	0152      	lsls	r2, r2, #5
 8001146:	d50b      	bpl.n	8001160 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001148:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800114a:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800114e:	f042 0202 	orr.w	r2, r2, #2
 8001152:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 8001154:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001156:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8001158:	f7ff ff6e 	bl	8001038 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	601d      	str	r5, [r3, #0]
 8001160:	bd38      	pop	{r3, r4, r5, pc}
	...

08001164 <HAL_ADC_ConfigChannel>:
{
 8001164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800116a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800116e:	2b01      	cmp	r3, #1
 8001170:	f000 8083 	beq.w	800127a <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001174:	680d      	ldr	r5, [r1, #0]
 8001176:	6804      	ldr	r4, [r0, #0]
 8001178:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800117a:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800117c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800117e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001182:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001184:	d92a      	bls.n	80011dc <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001186:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800118a:	68e7      	ldr	r7, [r4, #12]
 800118c:	3b1e      	subs	r3, #30
 800118e:	f04f 0e07 	mov.w	lr, #7
 8001192:	fa0e fe03 	lsl.w	lr, lr, r3
 8001196:	ea27 070e 	bic.w	r7, r7, lr
 800119a:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800119c:	68e7      	ldr	r7, [r4, #12]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	433b      	orrs	r3, r7
 80011a4:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80011a6:	684a      	ldr	r2, [r1, #4]
 80011a8:	2a06      	cmp	r2, #6
 80011aa:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80011ae:	d825      	bhi.n	80011fc <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011b0:	4413      	add	r3, r2
 80011b2:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80011b4:	1f59      	subs	r1, r3, #5
 80011b6:	231f      	movs	r3, #31
 80011b8:	408b      	lsls	r3, r1
 80011ba:	ea27 0303 	bic.w	r3, r7, r3
 80011be:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80011c2:	fa06 f101 	lsl.w	r1, r6, r1
 80011c6:	4311      	orrs	r1, r2
 80011c8:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_ADC_ConfigChannel+0x11c>)
 80011cc:	429c      	cmp	r4, r3
 80011ce:	d034      	beq.n	800123a <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80011d0:	2300      	movs	r3, #0
 80011d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80011d6:	4618      	mov	r0, r3
}
 80011d8:	b003      	add	sp, #12
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011dc:	6927      	ldr	r7, [r4, #16]
 80011de:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80011e2:	f04f 0e07 	mov.w	lr, #7
 80011e6:	fa0e fe03 	lsl.w	lr, lr, r3
 80011ea:	ea27 070e 	bic.w	r7, r7, lr
 80011ee:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011f0:	6927      	ldr	r7, [r4, #16]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	433b      	orrs	r3, r7
 80011f8:	6123      	str	r3, [r4, #16]
 80011fa:	e7d4      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80011fc:	2a0c      	cmp	r2, #12
 80011fe:	d80e      	bhi.n	800121e <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001200:	4413      	add	r3, r2
 8001202:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001204:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001208:	231f      	movs	r3, #31
 800120a:	4093      	lsls	r3, r2
 800120c:	ea21 0303 	bic.w	r3, r1, r3
 8001210:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001212:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001214:	fa06 f202 	lsl.w	r2, r6, r2
 8001218:	431a      	orrs	r2, r3
 800121a:	6322      	str	r2, [r4, #48]	; 0x30
 800121c:	e7d5      	b.n	80011ca <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800121e:	4413      	add	r3, r2
 8001220:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001222:	3b41      	subs	r3, #65	; 0x41
 8001224:	221f      	movs	r2, #31
 8001226:	409a      	lsls	r2, r3
 8001228:	ea21 0202 	bic.w	r2, r1, r2
 800122c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800122e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001230:	fa06 f103 	lsl.w	r1, r6, r3
 8001234:	4311      	orrs	r1, r2
 8001236:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001238:	e7c7      	b.n	80011ca <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800123a:	2d12      	cmp	r5, #18
 800123c:	d104      	bne.n	8001248 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800123e:	4a11      	ldr	r2, [pc, #68]	; (8001284 <HAL_ADC_ConfigChannel+0x120>)
 8001240:	6853      	ldr	r3, [r2, #4]
 8001242:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001246:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001248:	f1a5 0310 	sub.w	r3, r5, #16
 800124c:	2b01      	cmp	r3, #1
 800124e:	d8bf      	bhi.n	80011d0 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001250:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <HAL_ADC_ConfigChannel+0x120>)
 8001252:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001254:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001256:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800125a:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800125c:	d1b8      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_ADC_ConfigChannel+0x124>)
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_ADC_ConfigChannel+0x128>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	fbb3 f2f2 	udiv	r2, r3, r2
 8001268:	230a      	movs	r3, #10
 800126a:	4353      	muls	r3, r2
        counter--;
 800126c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800126e:	9b01      	ldr	r3, [sp, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0ad      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001274:	9b01      	ldr	r3, [sp, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	e7f8      	b.n	800126c <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800127a:	2002      	movs	r0, #2
 800127c:	e7ac      	b.n	80011d8 <HAL_ADC_ConfigChannel+0x74>
 800127e:	bf00      	nop
 8001280:	40012000 	.word	0x40012000
 8001284:	40012300 	.word	0x40012300
 8001288:	2000005c 	.word	0x2000005c
 800128c:	000f4240 	.word	0x000f4240

08001290 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001290:	4770      	bx	lr
	...

08001294 <HAL_ADCEx_MultiModeConfigChannel>:
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001294:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001298:	2b01      	cmp	r3, #1
{
 800129a:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800129c:	d01d      	beq.n	80012da <HAL_ADCEx_MultiModeConfigChannel+0x46>
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_ADCEx_MultiModeConfigChannel+0x4c>)
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	f022 021f 	bic.w	r2, r2, #31
 80012a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	680c      	ldr	r4, [r1, #0]
 80012ac:	4322      	orrs	r2, r4
 80012ae:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80012b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	684c      	ldr	r4, [r1, #4]
 80012bc:	4322      	orrs	r2, r4
 80012be:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80012c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	6889      	ldr	r1, [r1, #8]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012d0:	2300      	movs	r3, #0
 80012d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80012da:	2002      	movs	r0, #2
}
 80012dc:	bd10      	pop	{r4, pc}
 80012de:	bf00      	nop
 80012e0:	40012300 	.word	0x40012300

080012e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80012f4:	0200      	lsls	r0, r0, #8
 80012f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80012fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001300:	60d3      	str	r3, [r2, #12]
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130a:	b530      	push	{r4, r5, lr}
 800130c:	68dc      	ldr	r4, [r3, #12]
 800130e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001312:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	2b04      	cmp	r3, #4
 800131a:	bf28      	it	cs
 800131c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 0501 	mov.w	r5, #1
 8001324:	fa05 f303 	lsl.w	r3, r5, r3
 8001328:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132c:	bf8c      	ite	hi
 800132e:	3c03      	subhi	r4, #3
 8001330:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001332:	4019      	ands	r1, r3
 8001334:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001336:	fa05 f404 	lsl.w	r4, r5, r4
 800133a:	3c01      	subs	r4, #1
 800133c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800133e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	ea42 0201 	orr.w	r2, r2, r1
 8001344:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	bfaf      	iteee	ge
 800134a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	f000 000f 	andlt.w	r0, r0, #15
 8001352:	4b06      	ldrlt	r3, [pc, #24]	; (800136c <HAL_NVIC_SetPriority+0x64>)
 8001354:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	bfa5      	ittet	ge
 8001358:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800135c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001364:	bd30      	pop	{r4, r5, pc}
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	e000ed14 	.word	0xe000ed14

08001370 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001370:	0942      	lsrs	r2, r0, #5
 8001372:	2301      	movs	r3, #1
 8001374:	f000 001f 	and.w	r0, r0, #31
 8001378:	fa03 f000 	lsl.w	r0, r3, r0
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <HAL_NVIC_EnableIRQ+0x14>)
 800137e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100

08001388 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001388:	3801      	subs	r0, #1
 800138a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800138e:	d20a      	bcs.n	80013a6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001394:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	21f0      	movs	r1, #240	; 0xf0
 8001398:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013b6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013b8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013ba:	bf0c      	ite	eq
 80013bc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013c0:	f022 0204 	bicne.w	r2, r2, #4
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	4770      	bx	lr
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80013cc:	4770      	bx	lr

080013ce <HAL_SYSTICK_IRQHandler>:
{
 80013ce:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80013d0:	f7ff fffc 	bl	80013cc <HAL_SYSTICK_Callback>
 80013d4:	bd08      	pop	{r3, pc}

080013d6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80013d6:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80013d8:	4604      	mov	r4, r0
 80013da:	b168      	cbz	r0, 80013f8 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80013dc:	7903      	ldrb	r3, [r0, #4]
 80013de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013e2:	b913      	cbnz	r3, 80013ea <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80013e4:	7142      	strb	r2, [r0, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013e6:	f001 fe9b 	bl	8003120 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013ea:	2302      	movs	r3, #2
 80013ec:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013ee:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013f0:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013f2:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80013f4:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 80013f6:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80013f8:	2001      	movs	r0, #1
}
 80013fa:	bd10      	pop	{r4, pc}

080013fc <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80013fc:	7943      	ldrb	r3, [r0, #5]
 80013fe:	2b01      	cmp	r3, #1
{
 8001400:	b510      	push	{r4, lr}
 8001402:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001406:	d018      	beq.n	800143a <HAL_DAC_Start+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001408:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800140a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 800140c:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 800140e:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 8001410:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001412:	408a      	lsls	r2, r1
 8001414:	4322      	orrs	r2, r4
 8001416:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001418:	b989      	cbnz	r1, 800143e <HAL_DAC_Start+0x42>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800141a:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800141c:	681a      	ldr	r2, [r3, #0]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800141e:	074c      	lsls	r4, r1, #29
 8001420:	d507      	bpl.n	8001432 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001422:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001426:	2a38      	cmp	r2, #56	; 0x38
 8001428:	d103      	bne.n	8001432 <HAL_DAC_Start+0x36>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	f042 0201 	orr.w	r2, r2, #1
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001430:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001432:	2301      	movs	r3, #1
 8001434:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001436:	2300      	movs	r3, #0
 8001438:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 800143a:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 800143c:	bd10      	pop	{r4, pc}
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 800143e:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001440:	681a      	ldr	r2, [r3, #0]
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001442:	0349      	lsls	r1, r1, #13
 8001444:	d5f5      	bpl.n	8001432 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001446:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 800144a:	f5b2 1f60 	cmp.w	r2, #3670016	; 0x380000
 800144e:	d1f0      	bne.n	8001432 <HAL_DAC_Start+0x36>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	f042 0202 	orr.w	r2, r2, #2
 8001456:	e7eb      	b.n	8001430 <HAL_DAC_Start+0x34>

08001458 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001458:	7943      	ldrb	r3, [r0, #5]
 800145a:	2b01      	cmp	r3, #1
{
 800145c:	b530      	push	{r4, r5, lr}
 800145e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001462:	d017      	beq.n	8001494 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001464:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001466:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8001468:	6823      	ldr	r3, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800146a:	f640 75fe 	movw	r5, #4094	; 0xffe
 800146e:	4095      	lsls	r5, r2
 8001470:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001474:	c90a      	ldmia	r1, {r1, r3}
 8001476:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001478:	4093      	lsls	r3, r2
 800147a:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800147c:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	21c0      	movs	r1, #192	; 0xc0
 8001482:	fa01 f202 	lsl.w	r2, r1, r2
 8001486:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800148a:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800148c:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800148e:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001490:	2300      	movs	r3, #0
 8001492:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001494:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8001496:	bd30      	pop	{r4, r5, pc}

08001498 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001498:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 800149a:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800149c:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 800149e:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 80014a0:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 80014a2:	b941      	cbnz	r1, 80014b6 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80014a4:	9901      	ldr	r1, [sp, #4]
 80014a6:	3108      	adds	r1, #8
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80014a8:	440a      	add	r2, r1
 80014aa:	9201      	str	r2, [sp, #4]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80014ac:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 80014ae:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80014b0:	6013      	str	r3, [r2, #0]
}
 80014b2:	b002      	add	sp, #8
 80014b4:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80014b6:	9901      	ldr	r1, [sp, #4]
 80014b8:	3114      	adds	r1, #20
 80014ba:	e7f5      	b.n	80014a8 <HAL_DAC_SetValue+0x10>

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014c0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001674 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c8:	4a68      	ldr	r2, [pc, #416]	; (800166c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ca:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001678 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ce:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80014d2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80014d8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014dc:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80014e0:	45b6      	cmp	lr, r6
 80014e2:	f040 80ae 	bne.w	8001642 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e6:	684c      	ldr	r4, [r1, #4]
 80014e8:	f024 0710 	bic.w	r7, r4, #16
 80014ec:	2f02      	cmp	r7, #2
 80014ee:	d116      	bne.n	800151e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80014f0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80014f4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80014fc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001500:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001504:	f04f 0c0f 	mov.w	ip, #15
 8001508:	fa0c fc0b 	lsl.w	ip, ip, fp
 800150c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001510:	690d      	ldr	r5, [r1, #16]
 8001512:	fa05 f50b 	lsl.w	r5, r5, fp
 8001516:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800151a:	f8ca 5020 	str.w	r5, [sl, #32]
 800151e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001522:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001524:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001528:	fa05 f50a 	lsl.w	r5, r5, sl
 800152c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001532:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001536:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800153a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001540:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001542:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001546:	d811      	bhi.n	800156c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001548:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800154a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154e:	68cf      	ldr	r7, [r1, #12]
 8001550:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001554:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001558:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800155a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001560:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001564:	409f      	lsls	r7, r3
 8001566:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800156a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800156c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001570:	688f      	ldr	r7, [r1, #8]
 8001572:	fa07 f70a 	lsl.w	r7, r7, sl
 8001576:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001578:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800157a:	00e5      	lsls	r5, r4, #3
 800157c:	d561      	bpl.n	8001642 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	f04f 0b00 	mov.w	fp, #0
 8001582:	f8cd b00c 	str.w	fp, [sp, #12]
 8001586:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158a:	4d39      	ldr	r5, [pc, #228]	; (8001670 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001590:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001594:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001598:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800159c:	9703      	str	r7, [sp, #12]
 800159e:	9f03      	ldr	r7, [sp, #12]
 80015a0:	f023 0703 	bic.w	r7, r3, #3
 80015a4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80015a8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015ac:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80015b0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80015b8:	f04f 0e0f 	mov.w	lr, #15
 80015bc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015c0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015c6:	d043      	beq.n	8001650 <HAL_GPIO_Init+0x194>
 80015c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015cc:	42a8      	cmp	r0, r5
 80015ce:	d041      	beq.n	8001654 <HAL_GPIO_Init+0x198>
 80015d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015d4:	42a8      	cmp	r0, r5
 80015d6:	d03f      	beq.n	8001658 <HAL_GPIO_Init+0x19c>
 80015d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015dc:	42a8      	cmp	r0, r5
 80015de:	d03d      	beq.n	800165c <HAL_GPIO_Init+0x1a0>
 80015e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015e4:	42a8      	cmp	r0, r5
 80015e6:	d03b      	beq.n	8001660 <HAL_GPIO_Init+0x1a4>
 80015e8:	4548      	cmp	r0, r9
 80015ea:	d03b      	beq.n	8001664 <HAL_GPIO_Init+0x1a8>
 80015ec:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80015f0:	42a8      	cmp	r0, r5
 80015f2:	d039      	beq.n	8001668 <HAL_GPIO_Init+0x1ac>
 80015f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015f8:	42a8      	cmp	r0, r5
 80015fa:	bf14      	ite	ne
 80015fc:	2508      	movne	r5, #8
 80015fe:	2507      	moveq	r5, #7
 8001600:	fa05 f50c 	lsl.w	r5, r5, ip
 8001604:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001608:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800160a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800160c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001612:	bf0c      	ite	eq
 8001614:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001616:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001618:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800161a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001620:	bf0c      	ite	eq
 8001622:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001624:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001626:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001628:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800162a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800162e:	bf0c      	ite	eq
 8001630:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001632:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001634:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001636:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001638:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800163a:	bf54      	ite	pl
 800163c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800163e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001640:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001642:	3301      	adds	r3, #1
 8001644:	2b10      	cmp	r3, #16
 8001646:	f47f af44 	bne.w	80014d2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800164a:	b005      	add	sp, #20
 800164c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001650:	465d      	mov	r5, fp
 8001652:	e7d5      	b.n	8001600 <HAL_GPIO_Init+0x144>
 8001654:	2501      	movs	r5, #1
 8001656:	e7d3      	b.n	8001600 <HAL_GPIO_Init+0x144>
 8001658:	2502      	movs	r5, #2
 800165a:	e7d1      	b.n	8001600 <HAL_GPIO_Init+0x144>
 800165c:	2503      	movs	r5, #3
 800165e:	e7cf      	b.n	8001600 <HAL_GPIO_Init+0x144>
 8001660:	2504      	movs	r5, #4
 8001662:	e7cd      	b.n	8001600 <HAL_GPIO_Init+0x144>
 8001664:	2505      	movs	r5, #5
 8001666:	e7cb      	b.n	8001600 <HAL_GPIO_Init+0x144>
 8001668:	2506      	movs	r5, #6
 800166a:	e7c9      	b.n	8001600 <HAL_GPIO_Init+0x144>
 800166c:	40013c00 	.word	0x40013c00
 8001670:	40020000 	.word	0x40020000
 8001674:	40023800 	.word	0x40023800
 8001678:	40021400 	.word	0x40021400

0800167c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800167c:	6903      	ldr	r3, [r0, #16]
 800167e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001680:	bf14      	ite	ne
 8001682:	2001      	movne	r0, #1
 8001684:	2000      	moveq	r0, #0
 8001686:	4770      	bx	lr

08001688 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001688:	b10a      	cbz	r2, 800168e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168a:	6181      	str	r1, [r0, #24]
 800168c:	4770      	bx	lr
 800168e:	0409      	lsls	r1, r1, #16
 8001690:	e7fb      	b.n	800168a <HAL_GPIO_WritePin+0x2>

08001692 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001692:	6943      	ldr	r3, [r0, #20]
 8001694:	4059      	eors	r1, r3
 8001696:	6141      	str	r1, [r0, #20]
 8001698:	4770      	bx	lr

0800169a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_EXTI_IRQHandler>:
{
 800169c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80016a0:	6959      	ldr	r1, [r3, #20]
 80016a2:	4201      	tst	r1, r0
 80016a4:	d002      	beq.n	80016ac <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016a6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016a8:	f7ff fff7 	bl	800169a <HAL_GPIO_EXTI_Callback>
 80016ac:	bd08      	pop	{r3, pc}
 80016ae:	bf00      	nop
 80016b0:	40013c00 	.word	0x40013c00

080016b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b8:	4604      	mov	r4, r0
 80016ba:	b918      	cbnz	r0, 80016c4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80016bc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80016be:	b002      	add	sp, #8
 80016c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c4:	6803      	ldr	r3, [r0, #0]
 80016c6:	07dd      	lsls	r5, r3, #31
 80016c8:	d410      	bmi.n	80016ec <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	0798      	lsls	r0, r3, #30
 80016ce:	d458      	bmi.n	8001782 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	071a      	lsls	r2, r3, #28
 80016d4:	f100 809a 	bmi.w	800180c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	075b      	lsls	r3, r3, #29
 80016dc:	f100 80b8 	bmi.w	8001850 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e0:	69a2      	ldr	r2, [r4, #24]
 80016e2:	2a00      	cmp	r2, #0
 80016e4:	f040 8119 	bne.w	800191a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80016e8:	2000      	movs	r0, #0
 80016ea:	e7e8      	b.n	80016be <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ec:	4ba6      	ldr	r3, [pc, #664]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	f002 020c 	and.w	r2, r2, #12
 80016f4:	2a04      	cmp	r2, #4
 80016f6:	d007      	beq.n	8001708 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016fe:	2a08      	cmp	r2, #8
 8001700:	d10a      	bne.n	8001718 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	0259      	lsls	r1, r3, #9
 8001706:	d507      	bpl.n	8001718 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b9f      	ldr	r3, [pc, #636]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	039a      	lsls	r2, r3, #14
 800170e:	d5dc      	bpl.n	80016ca <HAL_RCC_OscConfig+0x16>
 8001710:	6863      	ldr	r3, [r4, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1d9      	bne.n	80016ca <HAL_RCC_OscConfig+0x16>
 8001716:	e7d1      	b.n	80016bc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	6863      	ldr	r3, [r4, #4]
 800171a:	4d9b      	ldr	r5, [pc, #620]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001720:	d111      	bne.n	8001746 <HAL_RCC_OscConfig+0x92>
 8001722:	682b      	ldr	r3, [r5, #0]
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800172a:	f7ff fb5d 	bl	8000de8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4d96      	ldr	r5, [pc, #600]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001730:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	039b      	lsls	r3, r3, #14
 8001736:	d4c8      	bmi.n	80016ca <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fb56 	bl	8000de8 <HAL_GetTick>
 800173c:	1b80      	subs	r0, r0, r6
 800173e:	2864      	cmp	r0, #100	; 0x64
 8001740:	d9f7      	bls.n	8001732 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001742:	2003      	movs	r0, #3
 8001744:	e7bb      	b.n	80016be <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001746:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800174a:	d104      	bne.n	8001756 <HAL_RCC_OscConfig+0xa2>
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001752:	602b      	str	r3, [r5, #0]
 8001754:	e7e5      	b.n	8001722 <HAL_RCC_OscConfig+0x6e>
 8001756:	682a      	ldr	r2, [r5, #0]
 8001758:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800175c:	602a      	str	r2, [r5, #0]
 800175e:	682a      	ldr	r2, [r5, #0]
 8001760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001764:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1df      	bne.n	800172a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800176a:	f7ff fb3d 	bl	8000de8 <HAL_GetTick>
 800176e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	039f      	lsls	r7, r3, #14
 8001774:	d5a9      	bpl.n	80016ca <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001776:	f7ff fb37 	bl	8000de8 <HAL_GetTick>
 800177a:	1b80      	subs	r0, r0, r6
 800177c:	2864      	cmp	r0, #100	; 0x64
 800177e:	d9f7      	bls.n	8001770 <HAL_RCC_OscConfig+0xbc>
 8001780:	e7df      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001782:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	f012 0f0c 	tst.w	r2, #12
 800178a:	d007      	beq.n	800179c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001792:	2a08      	cmp	r2, #8
 8001794:	d111      	bne.n	80017ba <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	025e      	lsls	r6, r3, #9
 800179a:	d40e      	bmi.n	80017ba <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179c:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	0795      	lsls	r5, r2, #30
 80017a2:	d502      	bpl.n	80017aa <HAL_RCC_OscConfig+0xf6>
 80017a4:	68e2      	ldr	r2, [r4, #12]
 80017a6:	2a01      	cmp	r2, #1
 80017a8:	d188      	bne.n	80016bc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	6921      	ldr	r1, [r4, #16]
 80017ae:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80017b2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80017b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b8:	e78a      	b.n	80016d0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017ba:	68e2      	ldr	r2, [r4, #12]
 80017bc:	4b73      	ldr	r3, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x2d8>)
 80017be:	b1b2      	cbz	r2, 80017ee <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb10 	bl	8000de8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	4d6f      	ldr	r5, [pc, #444]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80017ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	682b      	ldr	r3, [r5, #0]
 80017ce:	0798      	lsls	r0, r3, #30
 80017d0:	d507      	bpl.n	80017e2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	682b      	ldr	r3, [r5, #0]
 80017d4:	6922      	ldr	r2, [r4, #16]
 80017d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017de:	602b      	str	r3, [r5, #0]
 80017e0:	e776      	b.n	80016d0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff fb01 	bl	8000de8 <HAL_GetTick>
 80017e6:	1b80      	subs	r0, r0, r6
 80017e8:	2802      	cmp	r0, #2
 80017ea:	d9ef      	bls.n	80017cc <HAL_RCC_OscConfig+0x118>
 80017ec:	e7a9      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80017ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017f0:	f7ff fafa 	bl	8000de8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f4:	4d64      	ldr	r5, [pc, #400]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80017f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f8:	682b      	ldr	r3, [r5, #0]
 80017fa:	0799      	lsls	r1, r3, #30
 80017fc:	f57f af68 	bpl.w	80016d0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff faf2 	bl	8000de8 <HAL_GetTick>
 8001804:	1b80      	subs	r0, r0, r6
 8001806:	2802      	cmp	r0, #2
 8001808:	d9f6      	bls.n	80017f8 <HAL_RCC_OscConfig+0x144>
 800180a:	e79a      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800180c:	6962      	ldr	r2, [r4, #20]
 800180e:	4b60      	ldr	r3, [pc, #384]	; (8001990 <HAL_RCC_OscConfig+0x2dc>)
 8001810:	b17a      	cbz	r2, 8001832 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001816:	f7ff fae7 	bl	8000de8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	4d5b      	ldr	r5, [pc, #364]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800181c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001820:	079f      	lsls	r7, r3, #30
 8001822:	f53f af59 	bmi.w	80016d8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001826:	f7ff fadf 	bl	8000de8 <HAL_GetTick>
 800182a:	1b80      	subs	r0, r0, r6
 800182c:	2802      	cmp	r0, #2
 800182e:	d9f6      	bls.n	800181e <HAL_RCC_OscConfig+0x16a>
 8001830:	e787      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001832:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001834:	f7ff fad8 	bl	8000de8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	4d53      	ldr	r5, [pc, #332]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800183a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800183e:	0798      	lsls	r0, r3, #30
 8001840:	f57f af4a 	bpl.w	80016d8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff fad0 	bl	8000de8 <HAL_GetTick>
 8001848:	1b80      	subs	r0, r0, r6
 800184a:	2802      	cmp	r0, #2
 800184c:	d9f6      	bls.n	800183c <HAL_RCC_OscConfig+0x188>
 800184e:	e778      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001850:	4b4d      	ldr	r3, [pc, #308]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 8001852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001854:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001858:	d128      	bne.n	80018ac <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	9201      	str	r2, [sp, #4]
 800185c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800186e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	4d48      	ldr	r5, [pc, #288]	; (8001994 <HAL_RCC_OscConfig+0x2e0>)
 8001872:	682b      	ldr	r3, [r5, #0]
 8001874:	05d9      	lsls	r1, r3, #23
 8001876:	d51b      	bpl.n	80018b0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	68a3      	ldr	r3, [r4, #8]
 800187a:	4d43      	ldr	r5, [pc, #268]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 800187c:	2b01      	cmp	r3, #1
 800187e:	d127      	bne.n	80018d0 <HAL_RCC_OscConfig+0x21c>
 8001880:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001888:	f7ff faae 	bl	8000de8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188c:	4d3e      	ldr	r5, [pc, #248]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800188e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001896:	079b      	lsls	r3, r3, #30
 8001898:	d539      	bpl.n	800190e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800189a:	2e00      	cmp	r6, #0
 800189c:	f43f af20 	beq.w	80016e0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	4a39      	ldr	r2, [pc, #228]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 80018a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	e719      	b.n	80016e0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80018ac:	2600      	movs	r6, #0
 80018ae:	e7df      	b.n	8001870 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b0:	682b      	ldr	r3, [r5, #0]
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa96 	bl	8000de8 <HAL_GetTick>
 80018bc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	682b      	ldr	r3, [r5, #0]
 80018c0:	05da      	lsls	r2, r3, #23
 80018c2:	d4d9      	bmi.n	8001878 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c4:	f7ff fa90 	bl	8000de8 <HAL_GetTick>
 80018c8:	1bc0      	subs	r0, r0, r7
 80018ca:	2802      	cmp	r0, #2
 80018cc:	d9f7      	bls.n	80018be <HAL_RCC_OscConfig+0x20a>
 80018ce:	e738      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d104      	bne.n	80018de <HAL_RCC_OscConfig+0x22a>
 80018d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	672b      	str	r3, [r5, #112]	; 0x70
 80018dc:	e7d0      	b.n	8001880 <HAL_RCC_OscConfig+0x1cc>
 80018de:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	672a      	str	r2, [r5, #112]	; 0x70
 80018e6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018e8:	f022 0204 	bic.w	r2, r2, #4
 80018ec:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ca      	bne.n	8001888 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80018f2:	f7ff fa79 	bl	8000de8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018fa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018fe:	0798      	lsls	r0, r3, #30
 8001900:	d5cb      	bpl.n	800189a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff fa71 	bl	8000de8 <HAL_GetTick>
 8001906:	1bc0      	subs	r0, r0, r7
 8001908:	4540      	cmp	r0, r8
 800190a:	d9f7      	bls.n	80018fc <HAL_RCC_OscConfig+0x248>
 800190c:	e719      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff fa6b 	bl	8000de8 <HAL_GetTick>
 8001912:	1bc0      	subs	r0, r0, r7
 8001914:	4540      	cmp	r0, r8
 8001916:	d9bd      	bls.n	8001894 <HAL_RCC_OscConfig+0x1e0>
 8001918:	e713      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800191a:	4d1b      	ldr	r5, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 800191c:	68ab      	ldr	r3, [r5, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b08      	cmp	r3, #8
 8001924:	f43f aeca 	beq.w	80016bc <HAL_RCC_OscConfig+0x8>
 8001928:	4e1b      	ldr	r6, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x2e4>)
 800192a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800192e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001930:	d134      	bne.n	800199c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001932:	f7ff fa59 	bl	8000de8 <HAL_GetTick>
 8001936:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001938:	682b      	ldr	r3, [r5, #0]
 800193a:	0199      	lsls	r1, r3, #6
 800193c:	d41e      	bmi.n	800197c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800193e:	6a22      	ldr	r2, [r4, #32]
 8001940:	69e3      	ldr	r3, [r4, #28]
 8001942:	4313      	orrs	r3, r2
 8001944:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001946:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800194a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800194c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001950:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	4c0d      	ldr	r4, [pc, #52]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	3a01      	subs	r2, #1
 8001958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800195c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800195e:	2301      	movs	r3, #1
 8001960:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001962:	f7ff fa41 	bl	8000de8 <HAL_GetTick>
 8001966:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	019a      	lsls	r2, r3, #6
 800196c:	f53f aebc 	bmi.w	80016e8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fa3a 	bl	8000de8 <HAL_GetTick>
 8001974:	1b40      	subs	r0, r0, r5
 8001976:	2802      	cmp	r0, #2
 8001978:	d9f6      	bls.n	8001968 <HAL_RCC_OscConfig+0x2b4>
 800197a:	e6e2      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff fa34 	bl	8000de8 <HAL_GetTick>
 8001980:	1bc0      	subs	r0, r0, r7
 8001982:	2802      	cmp	r0, #2
 8001984:	d9d8      	bls.n	8001938 <HAL_RCC_OscConfig+0x284>
 8001986:	e6dc      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
 8001988:	40023800 	.word	0x40023800
 800198c:	42470000 	.word	0x42470000
 8001990:	42470e80 	.word	0x42470e80
 8001994:	40007000 	.word	0x40007000
 8001998:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800199c:	f7ff fa24 	bl	8000de8 <HAL_GetTick>
 80019a0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	682b      	ldr	r3, [r5, #0]
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	f57f ae9f 	bpl.w	80016e8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff fa1d 	bl	8000de8 <HAL_GetTick>
 80019ae:	1b00      	subs	r0, r0, r4
 80019b0:	2802      	cmp	r0, #2
 80019b2:	d9f6      	bls.n	80019a2 <HAL_RCC_OscConfig+0x2ee>
 80019b4:	e6c5      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
 80019b6:	bf00      	nop

080019b8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b8:	4913      	ldr	r1, [pc, #76]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80019ba:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019bc:	688b      	ldr	r3, [r1, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x16>
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ca:	4810      	ldr	r0, [pc, #64]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019cc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80019ce:	4810      	ldr	r0, [pc, #64]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x58>)
 80019d0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	bf14      	ite	ne
 80019de:	480c      	ldrne	r0, [pc, #48]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e0:	480a      	ldreq	r0, [pc, #40]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019e6:	bf18      	it	ne
 80019e8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ee:	fba1 0100 	umull	r0, r1, r1, r0
 80019f2:	f7ff f827 	bl	8000a44 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x50>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019fe:	3301      	adds	r3, #1
 8001a00:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001a02:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a06:	bd08      	pop	{r3, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	00f42400 	.word	0x00f42400
 8001a10:	007a1200 	.word	0x007a1200

08001a14 <HAL_RCC_ClockConfig>:
{
 8001a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a18:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	b910      	cbnz	r0, 8001a24 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
 8001a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_RCC_ClockConfig+0x124>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f002 020f 	and.w	r2, r2, #15
 8001a2c:	428a      	cmp	r2, r1
 8001a2e:	d328      	bcc.n	8001a82 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a30:	6821      	ldr	r1, [r4, #0]
 8001a32:	078f      	lsls	r7, r1, #30
 8001a34:	d42d      	bmi.n	8001a92 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	07c8      	lsls	r0, r1, #31
 8001a38:	d440      	bmi.n	8001abc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <HAL_RCC_ClockConfig+0x124>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f002 020f 	and.w	r2, r2, #15
 8001a42:	4295      	cmp	r5, r2
 8001a44:	d366      	bcc.n	8001b14 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a46:	6822      	ldr	r2, [r4, #0]
 8001a48:	0751      	lsls	r1, r2, #29
 8001a4a:	d46c      	bmi.n	8001b26 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4c:	0713      	lsls	r3, r2, #28
 8001a4e:	d507      	bpl.n	8001a60 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a50:	4a3a      	ldr	r2, [pc, #232]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
 8001a52:	6921      	ldr	r1, [r4, #16]
 8001a54:	6893      	ldr	r3, [r2, #8]
 8001a56:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a5a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a5e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a60:	f7ff ffaa 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
 8001a66:	4a36      	ldr	r2, [pc, #216]	; (8001b40 <HAL_RCC_ClockConfig+0x12c>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	40d8      	lsrs	r0, r3
 8001a72:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <HAL_RCC_ClockConfig+0x130>)
 8001a74:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff f96c 	bl	8000d54 <HAL_InitTick>
  return HAL_OK;
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	b2ca      	uxtb	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	4299      	cmp	r1, r3
 8001a8e:	d1c6      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xa>
 8001a90:	e7ce      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1c>
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a98:	bf1e      	ittt	ne
 8001a9a:	689a      	ldrne	r2, [r3, #8]
 8001a9c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001aa0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa4:	bf42      	ittt	mi
 8001aa6:	689a      	ldrmi	r2, [r3, #8]
 8001aa8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001aac:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	68a0      	ldr	r0, [r4, #8]
 8001ab2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ab6:	4302      	orrs	r2, r0
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	e7bc      	b.n	8001a36 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abc:	6862      	ldr	r2, [r4, #4]
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
 8001ac0:	2a01      	cmp	r2, #1
 8001ac2:	d11d      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	d0a8      	beq.n	8001a1e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001acc:	4e1b      	ldr	r6, [pc, #108]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
 8001ace:	68b3      	ldr	r3, [r6, #8]
 8001ad0:	f023 0303 	bic.w	r3, r3, #3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f986 	bl	8000de8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001adc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ae0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	68b3      	ldr	r3, [r6, #8]
 8001ae4:	6862      	ldr	r2, [r4, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001aee:	d0a4      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff f97a 	bl	8000de8 <HAL_GetTick>
 8001af4:	1bc0      	subs	r0, r0, r7
 8001af6:	4540      	cmp	r0, r8
 8001af8:	d9f3      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001afa:	2003      	movs	r0, #3
}
 8001afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b00:	1e91      	subs	r1, r2, #2
 8001b02:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b04:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b06:	d802      	bhi.n	8001b0e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b0c:	e7dd      	b.n	8001aca <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	f013 0f02 	tst.w	r3, #2
 8001b12:	e7da      	b.n	8001aca <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b14:	b2ea      	uxtb	r2, r5
 8001b16:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	429d      	cmp	r5, r3
 8001b20:	f47f af7d 	bne.w	8001a1e <HAL_RCC_ClockConfig+0xa>
 8001b24:	e78f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b26:	4905      	ldr	r1, [pc, #20]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
 8001b28:	68e0      	ldr	r0, [r4, #12]
 8001b2a:	688b      	ldr	r3, [r1, #8]
 8001b2c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b30:	4303      	orrs	r3, r0
 8001b32:	608b      	str	r3, [r1, #8]
 8001b34:	e78a      	b.n	8001a4c <HAL_RCC_ClockConfig+0x38>
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08003ff5 	.word	0x08003ff5
 8001b44:	2000005c 	.word	0x2000005c

08001b48 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b48:	4b01      	ldr	r3, [pc, #4]	; (8001b50 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	2000005c 	.word	0x2000005c

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b5e:	5cd3      	ldrb	r3, [r2, r3]
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b62:	6810      	ldr	r0, [r2, #0]
}
 8001b64:	40d8      	lsrs	r0, r3
 8001b66:	4770      	bx	lr
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08004005 	.word	0x08004005
 8001b70:	2000005c 	.word	0x2000005c

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b82:	6810      	ldr	r0, [r2, #0]
}
 8001b84:	40d8      	lsrs	r0, r3
 8001b86:	4770      	bx	lr
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08004005 	.word	0x08004005
 8001b90:	2000005c 	.word	0x2000005c

08001b94 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b94:	230f      	movs	r3, #15
 8001b96:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_GetClockConfig+0x34>)
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	f002 0203 	and.w	r2, r2, #3
 8001ba0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001ba8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001bb0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001bba:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_RCC_GetClockConfig+0x38>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	600b      	str	r3, [r1, #0]
 8001bc6:	4770      	bx	lr
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40023c00 	.word	0x40023c00

08001bd0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bd0:	6a03      	ldr	r3, [r0, #32]
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bd8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001bda:	6842      	ldr	r2, [r0, #4]
{
 8001bdc:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bde:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001be0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001be2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001be6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001be8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001bea:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001bee:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001bf0:	4c0c      	ldr	r4, [pc, #48]	; (8001c24 <TIM_OC1_SetConfig+0x54>)
 8001bf2:	42a0      	cmp	r0, r4
 8001bf4:	d009      	beq.n	8001c0a <TIM_OC1_SetConfig+0x3a>
 8001bf6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bfa:	42a0      	cmp	r0, r4
 8001bfc:	d005      	beq.n	8001c0a <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bfe:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c00:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001c02:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001c04:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001c06:	6203      	str	r3, [r0, #32]
} 
 8001c08:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001c0a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c0c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c0e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001c12:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c14:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c1a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c20:	4322      	orrs	r2, r4
 8001c22:	e7ec      	b.n	8001bfe <TIM_OC1_SetConfig+0x2e>
 8001c24:	40010000 	.word	0x40010000

08001c28 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c28:	6a03      	ldr	r3, [r0, #32]
 8001c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c2e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c30:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001c32:	6842      	ldr	r2, [r0, #4]
{
 8001c34:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c36:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001c3a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001c3e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c40:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001c42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c46:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001c4a:	4c0e      	ldr	r4, [pc, #56]	; (8001c84 <TIM_OC3_SetConfig+0x5c>)
 8001c4c:	42a0      	cmp	r0, r4
 8001c4e:	d009      	beq.n	8001c64 <TIM_OC3_SetConfig+0x3c>
 8001c50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c54:	42a0      	cmp	r0, r4
 8001c56:	d005      	beq.n	8001c64 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c58:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c5a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c5c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001c5e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c60:	6203      	str	r3, [r0, #32]
}
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c64:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c66:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c6c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c70:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c72:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c76:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c7c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001c80:	e7ea      	b.n	8001c58 <TIM_OC3_SetConfig+0x30>
 8001c82:	bf00      	nop
 8001c84:	40010000 	.word	0x40010000

08001c88 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c88:	6a03      	ldr	r3, [r0, #32]
 8001c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c8e:	6203      	str	r3, [r0, #32]
{
 8001c90:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c92:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001c94:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c96:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c98:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c9a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ca2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001ca4:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ca8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001cac:	4d09      	ldr	r5, [pc, #36]	; (8001cd4 <TIM_OC4_SetConfig+0x4c>)
 8001cae:	42a8      	cmp	r0, r5
 8001cb0:	d009      	beq.n	8001cc6 <TIM_OC4_SetConfig+0x3e>
 8001cb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cb6:	42a8      	cmp	r0, r5
 8001cb8:	d005      	beq.n	8001cc6 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cba:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cbc:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001cbe:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001cc0:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cc2:	6204      	str	r4, [r0, #32]
}
 8001cc4:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001cc6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ccc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001cd0:	e7f3      	b.n	8001cba <TIM_OC4_SetConfig+0x32>
 8001cd2:	bf00      	nop
 8001cd4:	40010000 	.word	0x40010000

08001cd8 <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 8001cd8:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 8001ce0:	6813      	ldr	r3, [r2, #0]
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8001cee:	2000      	movs	r0, #0
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_TIM_PWM_MspInit>:
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001cf4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001cf8:	2b01      	cmp	r3, #1
{
 8001cfa:	b570      	push	{r4, r5, r6, lr}
 8001cfc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001d00:	d01c      	beq.n	8001d3c <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d02:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001d06:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001d0e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d10:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001d14:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001d18:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d1a:	680a      	ldr	r2, [r1, #0]
 8001d1c:	2a40      	cmp	r2, #64	; 0x40
 8001d1e:	d079      	beq.n	8001e14 <HAL_TIM_ConfigClockSource+0x120>
 8001d20:	d819      	bhi.n	8001d56 <HAL_TIM_ConfigClockSource+0x62>
 8001d22:	2a10      	cmp	r2, #16
 8001d24:	f000 8093 	beq.w	8001e4e <HAL_TIM_ConfigClockSource+0x15a>
 8001d28:	d80a      	bhi.n	8001d40 <HAL_TIM_ConfigClockSource+0x4c>
 8001d2a:	2a00      	cmp	r2, #0
 8001d2c:	f000 8089 	beq.w	8001e42 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001d36:	2300      	movs	r3, #0
 8001d38:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001d3c:	4618      	mov	r0, r3
}
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001d40:	2a20      	cmp	r2, #32
 8001d42:	f000 808a 	beq.w	8001e5a <HAL_TIM_ConfigClockSource+0x166>
 8001d46:	2a30      	cmp	r2, #48	; 0x30
 8001d48:	d1f2      	bne.n	8001d30 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001d4a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001d50:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001d54:	e036      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001d56:	2a70      	cmp	r2, #112	; 0x70
 8001d58:	d036      	beq.n	8001dc8 <HAL_TIM_ConfigClockSource+0xd4>
 8001d5a:	d81b      	bhi.n	8001d94 <HAL_TIM_ConfigClockSource+0xa0>
 8001d5c:	2a50      	cmp	r2, #80	; 0x50
 8001d5e:	d042      	beq.n	8001de6 <HAL_TIM_ConfigClockSource+0xf2>
 8001d60:	2a60      	cmp	r2, #96	; 0x60
 8001d62:	d1e5      	bne.n	8001d30 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d64:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001d66:	684d      	ldr	r5, [r1, #4]
 8001d68:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d6a:	f024 0410 	bic.w	r4, r4, #16
 8001d6e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d70:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d72:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d74:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d7c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d80:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001d84:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d86:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001d88:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001d8e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001d92:	e017      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001d94:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001d98:	d011      	beq.n	8001dbe <HAL_TIM_ConfigClockSource+0xca>
 8001d9a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d9e:	d1c7      	bne.n	8001d30 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001da0:	688a      	ldr	r2, [r1, #8]
 8001da2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001da4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001da6:	68c9      	ldr	r1, [r1, #12]
 8001da8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001daa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001db2:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001db4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dbc:	e002      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	e7b3      	b.n	8001d30 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dc8:	688a      	ldr	r2, [r1, #8]
 8001dca:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001dcc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dce:	68c9      	ldr	r1, [r1, #12]
 8001dd0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dd2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001dda:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001ddc:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001dde:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001de0:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001de4:	e7ee      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001de6:	684c      	ldr	r4, [r1, #4]
 8001de8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001dea:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dec:	6a1d      	ldr	r5, [r3, #32]
 8001dee:	f025 0501 	bic.w	r5, r5, #1
 8001df2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001df4:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001df6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dfa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dfe:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e02:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e06:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001e08:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001e0e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001e12:	e7d7      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001e14:	684c      	ldr	r4, [r1, #4]
 8001e16:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e18:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e1a:	6a1d      	ldr	r5, [r3, #32]
 8001e1c:	f025 0501 	bic.w	r5, r5, #1
 8001e20:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001e22:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e24:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e28:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e2c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e30:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e34:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001e36:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001e3c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001e40:	e7c0      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e42:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001e48:	f042 0207 	orr.w	r2, r2, #7
 8001e4c:	e7ba      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e4e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001e54:	f042 0217 	orr.w	r2, r2, #23
 8001e58:	e7b4      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e5a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001e60:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001e64:	e7ae      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0xd0>

08001e66 <HAL_TIM_PeriodElapsedCallback>:
 8001e66:	4770      	bx	lr

08001e68 <HAL_TIM_OC_DelayElapsedCallback>:
 8001e68:	4770      	bx	lr

08001e6a <HAL_TIM_IC_CaptureCallback>:
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_PWM_PulseFinishedCallback>:
 8001e6c:	4770      	bx	lr

08001e6e <HAL_TIM_TriggerCallback>:
 8001e6e:	4770      	bx	lr

08001e70 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e70:	6803      	ldr	r3, [r0, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	0791      	lsls	r1, r2, #30
{
 8001e76:	b510      	push	{r4, lr}
 8001e78:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e7a:	d50e      	bpl.n	8001e9a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	0792      	lsls	r2, r2, #30
 8001e80:	d50b      	bpl.n	8001e9a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e82:	f06f 0202 	mvn.w	r2, #2
 8001e86:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e88:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e8c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8e:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e90:	d077      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001e92:	f7ff ffea 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	2300      	movs	r3, #0
 8001e98:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	0750      	lsls	r0, r2, #29
 8001ea0:	d510      	bpl.n	8001ec4 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	0751      	lsls	r1, r2, #29
 8001ea6:	d50d      	bpl.n	8001ec4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ea8:	f06f 0204 	mvn.w	r2, #4
 8001eac:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eae:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eb0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eb2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eb6:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eba:	d068      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebc:	f7ff ffd5 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	0712      	lsls	r2, r2, #28
 8001eca:	d50f      	bpl.n	8001eec <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	0710      	lsls	r0, r2, #28
 8001ed0:	d50c      	bpl.n	8001eec <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed2:	f06f 0208 	mvn.w	r2, #8
 8001ed6:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eda:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001edc:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ede:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee2:	d05a      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee4:	f7ff ffc1 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	06d2      	lsls	r2, r2, #27
 8001ef2:	d510      	bpl.n	8001f16 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	06d0      	lsls	r0, r2, #27
 8001ef8:	d50d      	bpl.n	8001f16 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001efa:	f06f 0210 	mvn.w	r2, #16
 8001efe:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f00:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f02:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f04:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f08:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f0c:	d04b      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	f7ff ffac 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	2300      	movs	r3, #0
 8001f14:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	07d1      	lsls	r1, r2, #31
 8001f1c:	d508      	bpl.n	8001f30 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	07d2      	lsls	r2, r2, #31
 8001f22:	d505      	bpl.n	8001f30 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f24:	f06f 0201 	mvn.w	r2, #1
 8001f28:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	f7ff ff9b 	bl	8001e66 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	0610      	lsls	r0, r2, #24
 8001f36:	d508      	bpl.n	8001f4a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	0611      	lsls	r1, r2, #24
 8001f3c:	d505      	bpl.n	8001f4a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f44:	4620      	mov	r0, r4
 8001f46:	f000 f9a8 	bl	800229a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	0652      	lsls	r2, r2, #25
 8001f50:	d508      	bpl.n	8001f64 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	0650      	lsls	r0, r2, #25
 8001f56:	d505      	bpl.n	8001f64 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff ff85 	bl	8001e6e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	0691      	lsls	r1, r2, #26
 8001f6a:	d522      	bpl.n	8001fb2 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	0692      	lsls	r2, r2, #26
 8001f70:	d51f      	bpl.n	8001fb2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f72:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001f76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f78:	611a      	str	r2, [r3, #16]
}
 8001f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001f7e:	f000 b98b 	b.w	8002298 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	f7ff ff71 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7ff ff70 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8001f8c:	e783      	b.n	8001e96 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	f7ff ff6b 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7ff ff6a 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8001f98:	e792      	b.n	8001ec0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	f7ff ff65 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff ff64 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8001fa4:	e7a0      	b.n	8001ee8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	f7ff ff5f 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7ff ff5e 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8001fb0:	e7af      	b.n	8001f12 <HAL_TIM_IRQHandler+0xa2>
 8001fb2:	bd10      	pop	{r4, pc}

08001fb4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001fb4:	4a2e      	ldr	r2, [pc, #184]	; (8002070 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001fb6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001fb8:	4290      	cmp	r0, r2
 8001fba:	d012      	beq.n	8001fe2 <TIM_Base_SetConfig+0x2e>
 8001fbc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fc0:	d00f      	beq.n	8001fe2 <TIM_Base_SetConfig+0x2e>
 8001fc2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001fc6:	4290      	cmp	r0, r2
 8001fc8:	d00b      	beq.n	8001fe2 <TIM_Base_SetConfig+0x2e>
 8001fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fce:	4290      	cmp	r0, r2
 8001fd0:	d007      	beq.n	8001fe2 <TIM_Base_SetConfig+0x2e>
 8001fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fd6:	4290      	cmp	r0, r2
 8001fd8:	d003      	beq.n	8001fe2 <TIM_Base_SetConfig+0x2e>
 8001fda:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001fde:	4290      	cmp	r0, r2
 8001fe0:	d11d      	bne.n	800201e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001fe2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fe8:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001fea:	4a21      	ldr	r2, [pc, #132]	; (8002070 <TIM_Base_SetConfig+0xbc>)
 8001fec:	4290      	cmp	r0, r2
 8001fee:	d104      	bne.n	8001ffa <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	e028      	b.n	800204c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001ffa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ffe:	d0f7      	beq.n	8001ff0 <TIM_Base_SetConfig+0x3c>
 8002000:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <TIM_Base_SetConfig+0xc0>)
 8002002:	4290      	cmp	r0, r2
 8002004:	d0f4      	beq.n	8001ff0 <TIM_Base_SetConfig+0x3c>
 8002006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800200a:	4290      	cmp	r0, r2
 800200c:	d0f0      	beq.n	8001ff0 <TIM_Base_SetConfig+0x3c>
 800200e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002012:	4290      	cmp	r0, r2
 8002014:	d0ec      	beq.n	8001ff0 <TIM_Base_SetConfig+0x3c>
 8002016:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800201a:	4290      	cmp	r0, r2
 800201c:	d0e8      	beq.n	8001ff0 <TIM_Base_SetConfig+0x3c>
 800201e:	4a16      	ldr	r2, [pc, #88]	; (8002078 <TIM_Base_SetConfig+0xc4>)
 8002020:	4290      	cmp	r0, r2
 8002022:	d0e5      	beq.n	8001ff0 <TIM_Base_SetConfig+0x3c>
 8002024:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002028:	4290      	cmp	r0, r2
 800202a:	d0e1      	beq.n	8001ff0 <TIM_Base_SetConfig+0x3c>
 800202c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002030:	4290      	cmp	r0, r2
 8002032:	d0dd      	beq.n	8001ff0 <TIM_Base_SetConfig+0x3c>
 8002034:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002038:	4290      	cmp	r0, r2
 800203a:	d0d9      	beq.n	8001ff0 <TIM_Base_SetConfig+0x3c>
 800203c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002040:	4290      	cmp	r0, r2
 8002042:	d0d5      	beq.n	8001ff0 <TIM_Base_SetConfig+0x3c>
 8002044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002048:	4290      	cmp	r0, r2
 800204a:	d0d1      	beq.n	8001ff0 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 800204c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800204e:	688b      	ldr	r3, [r1, #8]
 8002050:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002052:	680b      	ldr	r3, [r1, #0]
 8002054:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <TIM_Base_SetConfig+0xbc>)
 8002058:	4298      	cmp	r0, r3
 800205a:	d006      	beq.n	800206a <TIM_Base_SetConfig+0xb6>
 800205c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002060:	4298      	cmp	r0, r3
 8002062:	d002      	beq.n	800206a <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002064:	2301      	movs	r3, #1
 8002066:	6143      	str	r3, [r0, #20]
}
 8002068:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800206a:	690b      	ldr	r3, [r1, #16]
 800206c:	6303      	str	r3, [r0, #48]	; 0x30
 800206e:	e7f9      	b.n	8002064 <TIM_Base_SetConfig+0xb0>
 8002070:	40010000 	.word	0x40010000
 8002074:	40000400 	.word	0x40000400
 8002078:	40014000 	.word	0x40014000

0800207c <HAL_TIM_Base_Init>:
{ 
 800207c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800207e:	4604      	mov	r4, r0
 8002080:	b1a0      	cbz	r0, 80020ac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002082:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002086:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800208a:	b91b      	cbnz	r3, 8002094 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800208c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002090:	f001 f868 	bl	8003164 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002094:	2302      	movs	r3, #2
 8002096:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800209a:	6820      	ldr	r0, [r4, #0]
 800209c:	1d21      	adds	r1, r4, #4
 800209e:	f7ff ff89 	bl	8001fb4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80020a8:	2000      	movs	r0, #0
 80020aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020ac:	2001      	movs	r0, #1
}
 80020ae:	bd10      	pop	{r4, pc}

080020b0 <HAL_TIM_PWM_Init>:
{
 80020b0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80020b2:	4604      	mov	r4, r0
 80020b4:	b1a0      	cbz	r0, 80020e0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80020b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80020ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020be:	b91b      	cbnz	r3, 80020c8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80020c0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80020c4:	f7ff fe15 	bl	8001cf2 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80020c8:	2302      	movs	r3, #2
 80020ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80020ce:	6820      	ldr	r0, [r4, #0]
 80020d0:	1d21      	adds	r1, r4, #4
 80020d2:	f7ff ff6f 	bl	8001fb4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80020d6:	2301      	movs	r3, #1
 80020d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80020dc:	2000      	movs	r0, #0
 80020de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020e0:	2001      	movs	r0, #1
}  
 80020e2:	bd10      	pop	{r4, pc}

080020e4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e4:	6a03      	ldr	r3, [r0, #32]
 80020e6:	f023 0310 	bic.w	r3, r3, #16
 80020ea:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80020ec:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80020ee:	6842      	ldr	r2, [r0, #4]
{
 80020f0:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80020f2:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020f6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020fa:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020fe:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002100:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002104:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002108:	4c0d      	ldr	r4, [pc, #52]	; (8002140 <TIM_OC2_SetConfig+0x5c>)
 800210a:	42a0      	cmp	r0, r4
 800210c:	d009      	beq.n	8002122 <TIM_OC2_SetConfig+0x3e>
 800210e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002112:	42a0      	cmp	r0, r4
 8002114:	d005      	beq.n	8002122 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8002116:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002118:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800211a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800211c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800211e:	6203      	str	r3, [r0, #32]
}
 8002120:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002122:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002124:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800212a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800212e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002130:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002134:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800213a:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800213e:	e7ea      	b.n	8002116 <TIM_OC2_SetConfig+0x32>
 8002140:	40010000 	.word	0x40010000

08002144 <HAL_TIM_PWM_ConfigChannel>:
{
 8002144:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002146:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800214a:	2b01      	cmp	r3, #1
{
 800214c:	4604      	mov	r4, r0
 800214e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002152:	d025      	beq.n	80021a0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002154:	2301      	movs	r3, #1
 8002156:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800215a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800215e:	2a0c      	cmp	r2, #12
 8002160:	d818      	bhi.n	8002194 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002162:	e8df f002 	tbb	[pc, r2]
 8002166:	1707      	.short	0x1707
 8002168:	171e1717 	.word	0x171e1717
 800216c:	172f1717 	.word	0x172f1717
 8002170:	1717      	.short	0x1717
 8002172:	40          	.byte	0x40
 8002173:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002174:	6820      	ldr	r0, [r4, #0]
 8002176:	f7ff fd2b 	bl	8001bd0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800217a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800217c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800217e:	699a      	ldr	r2, [r3, #24]
 8002180:	f042 0208 	orr.w	r2, r2, #8
 8002184:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002186:	699a      	ldr	r2, [r3, #24]
 8002188:	f022 0204 	bic.w	r2, r2, #4
 800218c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002192:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002194:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002196:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002198:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800219c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80021a0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	f7ff ff9e 	bl	80020e4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021a8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021aa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021c2:	e7e6      	b.n	8002192 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021c4:	6820      	ldr	r0, [r4, #0]
 80021c6:	f7ff fd2f 	bl	8001c28 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021ca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80021cc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	f042 0208 	orr.w	r2, r2, #8
 80021d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	f022 0204 	bic.w	r2, r2, #4
 80021dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80021e2:	61da      	str	r2, [r3, #28]
    break;
 80021e4:	e7d6      	b.n	8002194 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021e6:	6820      	ldr	r0, [r4, #0]
 80021e8:	f7ff fd4e 	bl	8001c88 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021ec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80021ee:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002206:	e7ec      	b.n	80021e2 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002208 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002208:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800220c:	2b01      	cmp	r3, #1
{
 800220e:	b510      	push	{r4, lr}
 8002210:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002214:	d018      	beq.n	8002248 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002216:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800221a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800221c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800221e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002220:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002222:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002226:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4322      	orrs	r2, r4
 800222c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002234:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	430a      	orrs	r2, r1
 800223a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800223c:	2301      	movs	r3, #1
 800223e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002242:	2300      	movs	r3, #0
 8002244:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002248:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800224a:	bd10      	pop	{r4, pc}

0800224c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800224c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002250:	2b01      	cmp	r3, #1
 8002252:	d01f      	beq.n	8002294 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002254:	68cb      	ldr	r3, [r1, #12]
 8002256:	688a      	ldr	r2, [r1, #8]
 8002258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800225c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800225e:	684a      	ldr	r2, [r1, #4]
 8002260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002264:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002266:	680a      	ldr	r2, [r1, #0]
 8002268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800226c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800226e:	690a      	ldr	r2, [r1, #16]
 8002270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002274:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002276:	694a      	ldr	r2, [r1, #20]
 8002278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800227c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800227e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002280:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002284:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002286:	6802      	ldr	r2, [r0, #0]
 8002288:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 800228a:	2300      	movs	r3, #0
 800228c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002290:	4618      	mov	r0, r3
 8002292:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002294:	2002      	movs	r0, #2
}
 8002296:	4770      	bx	lr

08002298 <HAL_TIMEx_CommutationCallback>:
 8002298:	4770      	bx	lr

0800229a <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800229a:	4770      	bx	lr

0800229c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800229c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80022a0:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80022a2:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80022a4:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022a6:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80022a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80022ac:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80022ae:	6133      	str	r3, [r6, #16]
{
 80022b0:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022b2:	6883      	ldr	r3, [r0, #8]
 80022b4:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80022b6:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022b8:	4303      	orrs	r3, r0
 80022ba:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80022bc:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022c0:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80022c2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022c6:	430b      	orrs	r3, r1
 80022c8:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80022ca:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80022cc:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80022ce:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80022d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80022d4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022d6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80022da:	6173      	str	r3, [r6, #20]
 80022dc:	4b7a      	ldr	r3, [pc, #488]	; (80024c8 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022de:	d17c      	bne.n	80023da <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80022e0:	429e      	cmp	r6, r3
 80022e2:	d003      	beq.n	80022ec <UART_SetConfig+0x50>
 80022e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e8:	429e      	cmp	r6, r3
 80022ea:	d144      	bne.n	8002376 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022ec:	f7ff fc42 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 80022f0:	2519      	movs	r5, #25
 80022f2:	fb05 f300 	mul.w	r3, r5, r0
 80022f6:	6860      	ldr	r0, [r4, #4]
 80022f8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80022fc:	0040      	lsls	r0, r0, #1
 80022fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8002302:	fbb3 f3f9 	udiv	r3, r3, r9
 8002306:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800230a:	f7ff fc33 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 800230e:	6863      	ldr	r3, [r4, #4]
 8002310:	4368      	muls	r0, r5
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fbb0 f7f3 	udiv	r7, r0, r3
 8002318:	f7ff fc2c 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 800231c:	6863      	ldr	r3, [r4, #4]
 800231e:	4368      	muls	r0, r5
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fbb0 f3f3 	udiv	r3, r0, r3
 8002326:	fbb3 f3f9 	udiv	r3, r3, r9
 800232a:	fb09 7313 	mls	r3, r9, r3, r7
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	3332      	adds	r3, #50	; 0x32
 8002332:	fbb3 f3f9 	udiv	r3, r3, r9
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800233c:	f7ff fc1a 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002340:	6862      	ldr	r2, [r4, #4]
 8002342:	4368      	muls	r0, r5
 8002344:	0052      	lsls	r2, r2, #1
 8002346:	fbb0 faf2 	udiv	sl, r0, r2
 800234a:	f7ff fc13 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800234e:	6863      	ldr	r3, [r4, #4]
 8002350:	4368      	muls	r0, r5
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fbb0 f3f3 	udiv	r3, r0, r3
 8002358:	fbb3 f3f9 	udiv	r3, r3, r9
 800235c:	fb09 a313 	mls	r3, r9, r3, sl
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	3332      	adds	r3, #50	; 0x32
 8002364:	fbb3 f3f9 	udiv	r3, r3, r9
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800236e:	443b      	add	r3, r7
 8002370:	60b3      	str	r3, [r6, #8]
 8002372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002376:	f7ff fbed 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 800237a:	2519      	movs	r5, #25
 800237c:	fb05 f300 	mul.w	r3, r5, r0
 8002380:	6860      	ldr	r0, [r4, #4]
 8002382:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002386:	0040      	lsls	r0, r0, #1
 8002388:	fbb3 f3f0 	udiv	r3, r3, r0
 800238c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002390:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002394:	f7ff fbde 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8002398:	6863      	ldr	r3, [r4, #4]
 800239a:	4368      	muls	r0, r5
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fbb0 f7f3 	udiv	r7, r0, r3
 80023a2:	f7ff fbd7 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80023a6:	6863      	ldr	r3, [r4, #4]
 80023a8:	4368      	muls	r0, r5
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80023b4:	fb09 7313 	mls	r3, r9, r3, r7
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	3332      	adds	r3, #50	; 0x32
 80023bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80023c6:	f7ff fbc5 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80023ca:	6862      	ldr	r2, [r4, #4]
 80023cc:	4368      	muls	r0, r5
 80023ce:	0052      	lsls	r2, r2, #1
 80023d0:	fbb0 faf2 	udiv	sl, r0, r2
 80023d4:	f7ff fbbe 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80023d8:	e7b9      	b.n	800234e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80023da:	429e      	cmp	r6, r3
 80023dc:	d002      	beq.n	80023e4 <UART_SetConfig+0x148>
 80023de:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <UART_SetConfig+0x230>)
 80023e0:	429e      	cmp	r6, r3
 80023e2:	d140      	bne.n	8002466 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80023e4:	f7ff fbc6 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 80023e8:	6867      	ldr	r7, [r4, #4]
 80023ea:	2519      	movs	r5, #25
 80023ec:	f04f 0964 	mov.w	r9, #100	; 0x64
 80023f0:	fb05 f300 	mul.w	r3, r5, r0
 80023f4:	00bf      	lsls	r7, r7, #2
 80023f6:	fbb3 f3f7 	udiv	r3, r3, r7
 80023fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80023fe:	011f      	lsls	r7, r3, #4
 8002400:	f7ff fbb8 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002404:	6863      	ldr	r3, [r4, #4]
 8002406:	4368      	muls	r0, r5
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	fbb0 f8f3 	udiv	r8, r0, r3
 800240e:	f7ff fbb1 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002412:	6863      	ldr	r3, [r4, #4]
 8002414:	4368      	muls	r0, r5
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	fbb0 f3f3 	udiv	r3, r0, r3
 800241c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002420:	fb09 8313 	mls	r3, r9, r3, r8
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	3332      	adds	r3, #50	; 0x32
 8002428:	fbb3 f3f9 	udiv	r3, r3, r9
 800242c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002430:	f7ff fba0 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002434:	6862      	ldr	r2, [r4, #4]
 8002436:	4368      	muls	r0, r5
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	fbb0 faf2 	udiv	sl, r0, r2
 800243e:	f7ff fb99 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002442:	6863      	ldr	r3, [r4, #4]
 8002444:	4368      	muls	r0, r5
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fbb0 f3f3 	udiv	r3, r0, r3
 800244c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002450:	fb09 a313 	mls	r3, r9, r3, sl
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	3332      	adds	r3, #50	; 0x32
 8002458:	fbb3 f3f9 	udiv	r3, r3, r9
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	ea43 0308 	orr.w	r3, r3, r8
 8002464:	e783      	b.n	800236e <UART_SetConfig+0xd2>
 8002466:	f7ff fb75 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 800246a:	6867      	ldr	r7, [r4, #4]
 800246c:	2519      	movs	r5, #25
 800246e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002472:	fb05 f300 	mul.w	r3, r5, r0
 8002476:	00bf      	lsls	r7, r7, #2
 8002478:	fbb3 f3f7 	udiv	r3, r3, r7
 800247c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002480:	011f      	lsls	r7, r3, #4
 8002482:	f7ff fb67 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8002486:	6863      	ldr	r3, [r4, #4]
 8002488:	4368      	muls	r0, r5
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002490:	f7ff fb60 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8002494:	6863      	ldr	r3, [r4, #4]
 8002496:	4368      	muls	r0, r5
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	fbb3 f3f9 	udiv	r3, r3, r9
 80024a2:	fb09 8313 	mls	r3, r9, r3, r8
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	3332      	adds	r3, #50	; 0x32
 80024aa:	fbb3 f3f9 	udiv	r3, r3, r9
 80024ae:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80024b2:	f7ff fb4f 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80024b6:	6862      	ldr	r2, [r4, #4]
 80024b8:	4368      	muls	r0, r5
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	fbb0 faf2 	udiv	sl, r0, r2
 80024c0:	f7ff fb48 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80024c4:	e7bd      	b.n	8002442 <UART_SetConfig+0x1a6>
 80024c6:	bf00      	nop
 80024c8:	40011000 	.word	0x40011000
 80024cc:	40011400 	.word	0x40011400

080024d0 <HAL_UART_Init>:
{
 80024d0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80024d2:	4604      	mov	r4, r0
 80024d4:	b340      	cbz	r0, 8002528 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80024d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80024da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024de:	b91b      	cbnz	r3, 80024e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80024e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80024e4:	f000 fea4 	bl	8003230 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80024e8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80024ea:	2324      	movs	r3, #36	; 0x24
 80024ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80024f0:	68d3      	ldr	r3, [r2, #12]
 80024f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024f6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7ff fecf 	bl	800229c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002506:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800250e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002516:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800251a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800251e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002522:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002526:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002528:	2001      	movs	r0, #1
}
 800252a:	bd10      	pop	{r4, pc}

0800252c <LCD1602_TIM_MicorSecDelay>:
	TIM3->EGR = 1; 					//Update generate auto
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
}
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
	TIM3->ARR = uSecDelay-1;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <LCD1602_TIM_MicorSecDelay+0x20>)
 800252e:	3801      	subs	r0, #1
 8002530:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	611a      	str	r2, [r3, #16]
	TIM3->CR1 |= 1UL;
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
	while((TIM3->SR&0x0001) != 1);
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	07d2      	lsls	r2, r2, #31
 8002546:	d5fc      	bpl.n	8002542 <LCD1602_TIM_MicorSecDelay+0x16>
}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40000400 	.word	0x40000400

08002550 <LCD1602_TIM_Config>:
{
 8002550:	b510      	push	{r4, lr}
 8002552:	b086      	sub	sp, #24
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 8002554:	4669      	mov	r1, sp
 8002556:	a801      	add	r0, sp, #4
 8002558:	f7ff fb1c 	bl	8001b94 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 800255c:	9b04      	ldr	r3, [sp, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d12c      	bne.n	80025bc <LCD1602_TIM_Config+0x6c>
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 8002562:	f7ff faf7 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
	clockSpeed *= 0.000001;
 8002566:	f7fd ffc5 	bl	80004f4 <__aeabi_ui2d>
 800256a:	a319      	add	r3, pc, #100	; (adr r3, 80025d0 <LCD1602_TIM_Config+0x80>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fe f836 	bl	80005e0 <__aeabi_dmul>
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <LCD1602_TIM_Config+0x78>)
	TIM3->CR1 &= ~(0x0010);
 8002576:	4c15      	ldr	r4, [pc, #84]	; (80025cc <LCD1602_TIM_Config+0x7c>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8002578:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->CR1 &= ~(0x0010);
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	f023 0310 	bic.w	r3, r3, #16
 8002586:	6023      	str	r3, [r4, #0]
	TIM3->CR1 &= ~(0x0001);
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	6023      	str	r3, [r4, #0]
	TIM3->CR1 &= ~(1UL << 2);
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	f023 0304 	bic.w	r3, r3, #4
 8002596:	6023      	str	r3, [r4, #0]
	TIM3->CR1 |= (1UL << 3);				  
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	6023      	str	r3, [r4, #0]
	clockSpeed *= 0.000001;
 80025a0:	f7fe fa30 	bl	8000a04 <__aeabi_d2uiz>
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 80025a4:	2309      	movs	r3, #9
	TIM3->PSC = clockSpeed-1;
 80025a6:	3801      	subs	r0, #1
 80025a8:	62a0      	str	r0, [r4, #40]	; 0x28
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 80025aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM3->EGR = 1; 					//Update generate auto
 80025ac:	2301      	movs	r3, #1
 80025ae:	6163      	str	r3, [r4, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 80025b0:	6923      	ldr	r3, [r4, #16]
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6123      	str	r3, [r4, #16]
}
 80025b8:	b006      	add	sp, #24
 80025ba:	bd10      	pop	{r4, pc}
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 80025bc:	f7ff faca 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80025c0:	0040      	lsls	r0, r0, #1
 80025c2:	e7d0      	b.n	8002566 <LCD1602_TIM_Config+0x16>
 80025c4:	f3af 8000 	nop.w
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40000400 	.word	0x40000400
 80025d0:	a0b5ed8d 	.word	0xa0b5ed8d
 80025d4:	3eb0c6f7 	.word	0x3eb0c6f7

080025d8 <LCD1602_EnablePulse>:
{
 80025d8:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80025da:	4d0a      	ldr	r5, [pc, #40]	; (8002604 <LCD1602_EnablePulse+0x2c>)
 80025dc:	4c0a      	ldr	r4, [pc, #40]	; (8002608 <LCD1602_EnablePulse+0x30>)
 80025de:	8829      	ldrh	r1, [r5, #0]
 80025e0:	6820      	ldr	r0, [r4, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f7ff f850 	bl	8001688 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 80025e8:	200a      	movs	r0, #10
 80025ea:	f7ff ff9f 	bl	800252c <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80025ee:	6820      	ldr	r0, [r4, #0]
 80025f0:	8829      	ldrh	r1, [r5, #0]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f7ff f848 	bl	8001688 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 80025f8:	203c      	movs	r0, #60	; 0x3c
}
 80025fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD1602_TIM_MicorSecDelay(60);
 80025fe:	f7ff bf95 	b.w	800252c <LCD1602_TIM_MicorSecDelay>
 8002602:	bf00      	nop
 8002604:	200000f0 	.word	0x200000f0
 8002608:	200000fc 	.word	0x200000fc

0800260c <LCD1602_write>:
{
 800260c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(mode_8_4_I2C == 1)		//8bits mode
 8002610:	4b43      	ldr	r3, [pc, #268]	; (8002720 <LCD1602_write+0x114>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b01      	cmp	r3, #1
{
 8002616:	4604      	mov	r4, r0
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8002618:	ea4f 1610 	mov.w	r6, r0, lsr #4
	if(mode_8_4_I2C == 1)		//8bits mode
 800261c:	d13d      	bne.n	800269a <LCD1602_write+0x8e>
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800261e:	4d41      	ldr	r5, [pc, #260]	; (8002724 <LCD1602_write+0x118>)
 8002620:	4b41      	ldr	r3, [pc, #260]	; (8002728 <LCD1602_write+0x11c>)
 8002622:	f000 0201 	and.w	r2, r0, #1
 8002626:	8819      	ldrh	r1, [r3, #0]
 8002628:	6828      	ldr	r0, [r5, #0]
 800262a:	f7ff f82d 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <LCD1602_write+0x120>)
 8002630:	6828      	ldr	r0, [r5, #0]
 8002632:	8819      	ldrh	r1, [r3, #0]
 8002634:	f004 0202 	and.w	r2, r4, #2
 8002638:	f7ff f826 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800263c:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <LCD1602_write+0x124>)
 800263e:	6828      	ldr	r0, [r5, #0]
 8002640:	8819      	ldrh	r1, [r3, #0]
 8002642:	f004 0204 	and.w	r2, r4, #4
 8002646:	f7ff f81f 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800264a:	4b3a      	ldr	r3, [pc, #232]	; (8002734 <LCD1602_write+0x128>)
 800264c:	6828      	ldr	r0, [r5, #0]
 800264e:	8819      	ldrh	r1, [r3, #0]
 8002650:	f004 0208 	and.w	r2, r4, #8
 8002654:	f7ff f818 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002658:	4c37      	ldr	r4, [pc, #220]	; (8002738 <LCD1602_write+0x12c>)
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <LCD1602_write+0x130>)
 800265c:	6820      	ldr	r0, [r4, #0]
 800265e:	8819      	ldrh	r1, [r3, #0]
 8002660:	f006 0201 	and.w	r2, r6, #1
 8002664:	f7ff f810 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002668:	4b35      	ldr	r3, [pc, #212]	; (8002740 <LCD1602_write+0x134>)
 800266a:	6820      	ldr	r0, [r4, #0]
 800266c:	8819      	ldrh	r1, [r3, #0]
 800266e:	f006 0202 	and.w	r2, r6, #2
 8002672:	f7ff f809 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8002676:	4b33      	ldr	r3, [pc, #204]	; (8002744 <LCD1602_write+0x138>)
 8002678:	6820      	ldr	r0, [r4, #0]
 800267a:	8819      	ldrh	r1, [r3, #0]
 800267c:	f006 0204 	and.w	r2, r6, #4
 8002680:	f7ff f802 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8002684:	4b30      	ldr	r3, [pc, #192]	; (8002748 <LCD1602_write+0x13c>)
 8002686:	6820      	ldr	r0, [r4, #0]
 8002688:	8819      	ldrh	r1, [r3, #0]
 800268a:	f006 0208 	and.w	r2, r6, #8
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800268e:	f7fe fffb 	bl	8001688 <HAL_GPIO_WritePin>
}
 8002692:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		LCD1602_EnablePulse();
 8002696:	f7ff bf9f 	b.w	80025d8 <LCD1602_EnablePulse>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 800269a:	2b02      	cmp	r3, #2
 800269c:	d13e      	bne.n	800271c <LCD1602_write+0x110>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800269e:	4d26      	ldr	r5, [pc, #152]	; (8002738 <LCD1602_write+0x12c>)
 80026a0:	f8df a098 	ldr.w	sl, [pc, #152]	; 800273c <LCD1602_write+0x130>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80026a4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002740 <LCD1602_write+0x134>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80026a8:	f8ba 1000 	ldrh.w	r1, [sl]
 80026ac:	6828      	ldr	r0, [r5, #0]
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80026ae:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8002744 <LCD1602_write+0x138>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80026b2:	4f25      	ldr	r7, [pc, #148]	; (8002748 <LCD1602_write+0x13c>)
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80026b4:	f006 0201 	and.w	r2, r6, #1
 80026b8:	f7fe ffe6 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80026bc:	f006 0202 	and.w	r2, r6, #2
 80026c0:	f8b9 1000 	ldrh.w	r1, [r9]
 80026c4:	6828      	ldr	r0, [r5, #0]
 80026c6:	f7fe ffdf 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80026ca:	f006 0204 	and.w	r2, r6, #4
 80026ce:	f8b8 1000 	ldrh.w	r1, [r8]
 80026d2:	6828      	ldr	r0, [r5, #0]
 80026d4:	f7fe ffd8 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80026d8:	f006 0208 	and.w	r2, r6, #8
 80026dc:	8839      	ldrh	r1, [r7, #0]
 80026de:	6828      	ldr	r0, [r5, #0]
 80026e0:	f7fe ffd2 	bl	8001688 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 80026e4:	f7ff ff78 	bl	80025d8 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80026e8:	f004 0201 	and.w	r2, r4, #1
 80026ec:	f8ba 1000 	ldrh.w	r1, [sl]
 80026f0:	6828      	ldr	r0, [r5, #0]
 80026f2:	f7fe ffc9 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80026f6:	f004 0202 	and.w	r2, r4, #2
 80026fa:	f8b9 1000 	ldrh.w	r1, [r9]
 80026fe:	6828      	ldr	r0, [r5, #0]
 8002700:	f7fe ffc2 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8002704:	f004 0204 	and.w	r2, r4, #4
 8002708:	f8b8 1000 	ldrh.w	r1, [r8]
 800270c:	6828      	ldr	r0, [r5, #0]
 800270e:	f7fe ffbb 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002712:	f004 0208 	and.w	r2, r4, #8
 8002716:	8839      	ldrh	r1, [r7, #0]
 8002718:	6828      	ldr	r0, [r5, #0]
 800271a:	e7b8      	b.n	800268e <LCD1602_write+0x82>
 800271c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002720:	20000009 	.word	0x20000009
 8002724:	200000f4 	.word	0x200000f4
 8002728:	200000e0 	.word	0x200000e0
 800272c:	200000e2 	.word	0x200000e2
 8002730:	200000e4 	.word	0x200000e4
 8002734:	200000e6 	.word	0x200000e6
 8002738:	200000f8 	.word	0x200000f8
 800273c:	200000e8 	.word	0x200000e8
 8002740:	200000ea 	.word	0x200000ea
 8002744:	200000ec 	.word	0x200000ec
 8002748:	200000ee 	.word	0x200000ee

0800274c <LCD1602_write4bitCommand>:
	//Call low level write parallel function
	LCD1602_write(data);
}
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
static void LCD1602_write4bitCommand(uint8_t nibble)
{
 800274c:	b538      	push	{r3, r4, r5, lr}
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <LCD1602_write4bitCommand+0x54>)
	uint8_t LSB_nibble = nibble&0xF;
	//Set RS to 0
	LCD1602_RS(false);
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002750:	4c14      	ldr	r4, [pc, #80]	; (80027a4 <LCD1602_write4bitCommand+0x58>)
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8002752:	8819      	ldrh	r1, [r3, #0]
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <LCD1602_write4bitCommand+0x5c>)
{
 8002756:	4605      	mov	r5, r0
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8002758:	2200      	movs	r2, #0
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	f7fe ff94 	bl	8001688 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <LCD1602_write4bitCommand+0x60>)
 8002762:	6820      	ldr	r0, [r4, #0]
 8002764:	8819      	ldrh	r1, [r3, #0]
 8002766:	f005 0201 	and.w	r2, r5, #1
 800276a:	f7fe ff8d 	bl	8001688 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <LCD1602_write4bitCommand+0x64>)
 8002770:	6820      	ldr	r0, [r4, #0]
 8002772:	8819      	ldrh	r1, [r3, #0]
 8002774:	f005 0202 	and.w	r2, r5, #2
 8002778:	f7fe ff86 	bl	8001688 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <LCD1602_write4bitCommand+0x68>)
 800277e:	6820      	ldr	r0, [r4, #0]
 8002780:	8819      	ldrh	r1, [r3, #0]
 8002782:	f005 0204 	and.w	r2, r5, #4
 8002786:	f7fe ff7f 	bl	8001688 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <LCD1602_write4bitCommand+0x6c>)
 800278c:	6820      	ldr	r0, [r4, #0]
 800278e:	8819      	ldrh	r1, [r3, #0]
 8002790:	f005 0208 	and.w	r2, r5, #8
 8002794:	f7fe ff78 	bl	8001688 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
}
 8002798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD1602_EnablePulse();
 800279c:	f7ff bf1c 	b.w	80025d8 <LCD1602_EnablePulse>
 80027a0:	200000f2 	.word	0x200000f2
 80027a4:	200000f8 	.word	0x200000f8
 80027a8:	200000fc 	.word	0x200000fc
 80027ac:	200000e8 	.word	0x200000e8
 80027b0:	200000ea 	.word	0x200000ea
 80027b4:	200000ec 	.word	0x200000ec
 80027b8:	200000ee 	.word	0x200000ee

080027bc <LCD1602_writeCommand>:
{
 80027bc:	b510      	push	{r4, lr}
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <LCD1602_writeCommand+0x1c>)
 80027c0:	8819      	ldrh	r1, [r3, #0]
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <LCD1602_writeCommand+0x20>)
{
 80027c4:	4604      	mov	r4, r0
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 80027c6:	2200      	movs	r2, #0
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	f7fe ff5d 	bl	8001688 <HAL_GPIO_WritePin>
	LCD1602_write(command);
 80027ce:	4620      	mov	r0, r4
}
 80027d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD1602_write(command);
 80027d4:	f7ff bf1a 	b.w	800260c <LCD1602_write>
 80027d8:	200000f2 	.word	0x200000f2
 80027dc:	200000fc 	.word	0x200000fc

080027e0 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 80027e2:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 80028a4 <LCD1602_Begin4BIT+0xc4>
{
 80027e6:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	PORT_RS_and_E = PORT_RS_E;
 80027ea:	f8ce 0000 	str.w	r0, [lr]
	PIN_RS = RS;
 80027ee:	4824      	ldr	r0, [pc, #144]	; (8002880 <LCD1602_Begin4BIT+0xa0>)
{
 80027f0:	f8bd 601c 	ldrh.w	r6, [sp, #28]
	PIN_RS = RS;
 80027f4:	8001      	strh	r1, [r0, #0]
	PIN_E = E;
 80027f6:	4923      	ldr	r1, [pc, #140]	; (8002884 <LCD1602_Begin4BIT+0xa4>)
{
 80027f8:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	PIN_E = E;
 80027fc:	800a      	strh	r2, [r1, #0]
	PORT_MSB = PORT_MSBs4to7;
 80027fe:	4a22      	ldr	r2, [pc, #136]	; (8002888 <LCD1602_Begin4BIT+0xa8>)
{
 8002800:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	PORT_MSB = PORT_MSBs4to7;
 8002804:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <LCD1602_Begin4BIT+0xac>)
 8002808:	801f      	strh	r7, [r3, #0]
	D5_PIN = D5;
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <LCD1602_Begin4BIT+0xb0>)
 800280c:	801e      	strh	r6, [r3, #0]
	D6_PIN = D6;
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <LCD1602_Begin4BIT+0xb4>)
 8002810:	801d      	strh	r5, [r3, #0]
	D7_PIN = D7;
 8002812:	4b21      	ldr	r3, [pc, #132]	; (8002898 <LCD1602_Begin4BIT+0xb8>)
 8002814:	801c      	strh	r4, [r3, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 8002816:	f7ff fe9b 	bl	8002550 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <LCD1602_Begin4BIT+0xbc>)
 800281c:	2502      	movs	r5, #2
 800281e:	701d      	strb	r5, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 8002820:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <LCD1602_Begin4BIT+0xc0>)
 8002822:	2428      	movs	r4, #40	; 0x28
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8002824:	2014      	movs	r0, #20
	FunctionSet = 0x28;
 8002826:	701c      	strb	r4, [r3, #0]
	HAL_Delay(20);
 8002828:	f7fe fae4 	bl	8000df4 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 800282c:	2003      	movs	r0, #3
 800282e:	f7ff ff8d 	bl	800274c <LCD1602_write4bitCommand>
	HAL_Delay(5);
 8002832:	2005      	movs	r0, #5
 8002834:	f7fe fade 	bl	8000df4 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8002838:	2003      	movs	r0, #3
 800283a:	f7ff ff87 	bl	800274c <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800283e:	2001      	movs	r0, #1
 8002840:	f7fe fad8 	bl	8000df4 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8002844:	2003      	movs	r0, #3
 8002846:	f7ff ff81 	bl	800274c <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800284a:	2001      	movs	r0, #1
 800284c:	f7fe fad2 	bl	8000df4 <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 8002850:	4628      	mov	r0, r5
 8002852:	f7ff ff7b 	bl	800274c <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8002856:	2001      	movs	r0, #1
 8002858:	f7fe facc 	bl	8000df4 <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 800285c:	200f      	movs	r0, #15
 800285e:	f7ff ffad 	bl	80027bc <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8002862:	2001      	movs	r0, #1
 8002864:	f7ff ffaa 	bl	80027bc <LCD1602_writeCommand>
	HAL_Delay(3);
 8002868:	2003      	movs	r0, #3
 800286a:	f7fe fac3 	bl	8000df4 <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 800286e:	4620      	mov	r0, r4
 8002870:	f7ff ffa4 	bl	80027bc <LCD1602_writeCommand>
	HAL_Delay(3);
 8002874:	2003      	movs	r0, #3
}
 8002876:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_Delay(3);
 800287a:	f7fe babb 	b.w	8000df4 <HAL_Delay>
 800287e:	bf00      	nop
 8002880:	200000f2 	.word	0x200000f2
 8002884:	200000f0 	.word	0x200000f0
 8002888:	200000f8 	.word	0x200000f8
 800288c:	200000e8 	.word	0x200000e8
 8002890:	200000ea 	.word	0x200000ea
 8002894:	200000ec 	.word	0x200000ec
 8002898:	200000ee 	.word	0x200000ee
 800289c:	20000009 	.word	0x20000009
 80028a0:	20000008 	.word	0x20000008
 80028a4:	200000fc 	.word	0x200000fc

080028a8 <LCD1602_print>:
//3) LCD print string
void LCD1602_print(char string[])
{
 80028a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 80028ac:	4f0a      	ldr	r7, [pc, #40]	; (80028d8 <LCD1602_print+0x30>)
 80028ae:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80028dc <LCD1602_print+0x34>
 80028b2:	1e45      	subs	r5, r0, #1
 80028b4:	f100 040f 	add.w	r4, r0, #15
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 80028b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80028bc:	b156      	cbz	r6, 80028d4 <LCD1602_print+0x2c>
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 80028be:	2201      	movs	r2, #1
 80028c0:	8839      	ldrh	r1, [r7, #0]
 80028c2:	f8d8 0000 	ldr.w	r0, [r8]
 80028c6:	f7fe fedf 	bl	8001688 <HAL_GPIO_WritePin>
	LCD1602_write(data);
 80028ca:	4630      	mov	r0, r6
 80028cc:	f7ff fe9e 	bl	800260c <LCD1602_write>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 80028d0:	42a5      	cmp	r5, r4
 80028d2:	d1f1      	bne.n	80028b8 <LCD1602_print+0x10>
 80028d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028d8:	200000f2 	.word	0x200000f2
 80028dc:	200000fc 	.word	0x200000fc

080028e0 <LCD1602_setCursor>:
}
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 80028e0:	3901      	subs	r1, #1
 80028e2:	f001 010f 	and.w	r1, r1, #15
	if(row==1)
 80028e6:	2801      	cmp	r0, #1
	{
		maskData |= (0x80);
		LCD1602_writeCommand(maskData);
 80028e8:	bf0c      	ite	eq
 80028ea:	f041 0080 	orreq.w	r0, r1, #128	; 0x80
	}
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
 80028ee:	f041 00c0 	orrne.w	r0, r1, #192	; 0xc0
 80028f2:	f7ff bf63 	b.w	80027bc <LCD1602_writeCommand>

080028f6 <LCD1602_1stLine>:
		LCD1602_writeCommand(maskData);
 80028f6:	2080      	movs	r0, #128	; 0x80
 80028f8:	f7ff bf60 	b.w	80027bc <LCD1602_writeCommand>

080028fc <LCD1602_2ndLine>:
		LCD1602_writeCommand(maskData);
 80028fc:	20c0      	movs	r0, #192	; 0xc0
 80028fe:	f7ff bf5d 	b.w	80027bc <LCD1602_writeCommand>

08002902 <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 8002902:	b508      	push	{r3, lr}
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8002904:	2001      	movs	r0, #1
 8002906:	f7ff ff59 	bl	80027bc <LCD1602_writeCommand>
	HAL_Delay(3);
 800290a:	2003      	movs	r0, #3
}
 800290c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(3);
 8002910:	f7fe ba70 	b.w	8000df4 <HAL_Delay>

08002914 <LCD1602_PrintInt>:
}

//********** Print numbers to LCD **********//
//1. Integer
void LCD1602_PrintInt(int number)
{
 8002914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char numStr[16];
	sprintf(numStr,"%d", number);
 8002916:	4602      	mov	r2, r0
 8002918:	4904      	ldr	r1, [pc, #16]	; (800292c <LCD1602_PrintInt+0x18>)
 800291a:	4668      	mov	r0, sp
 800291c:	f000 fd9c 	bl	8003458 <siprintf>
	LCD1602_print(numStr);
 8002920:	4668      	mov	r0, sp
 8002922:	f7ff ffc1 	bl	80028a8 <LCD1602_print>
}
 8002926:	b005      	add	sp, #20
 8002928:	f85d fb04 	ldr.w	pc, [sp], #4
 800292c:	08003fdc 	.word	0x08003fdc

08002930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002930:	b530      	push	{r4, r5, lr}
 8002932:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <SystemClock_Config+0xa4>)
 8002936:	2100      	movs	r1, #0
 8002938:	9101      	str	r1, [sp, #4]
 800293a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <SystemClock_Config+0xa8>)
 800294e:	9102      	str	r1, [sp, #8]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002962:	2301      	movs	r3, #1
 8002964:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800296a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800296c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002970:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002972:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002974:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002976:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002978:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800297a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800297c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800297e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002980:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002982:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002984:	f7fe fe96 	bl	80016b4 <HAL_RCC_OscConfig>
 8002988:	b100      	cbz	r0, 800298c <SystemClock_Config+0x5c>
 800298a:	e7fe      	b.n	800298a <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800298c:	230f      	movs	r3, #15
 800298e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002990:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002994:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002996:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002998:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800299a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800299e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a0:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029a2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029a4:	f7ff f836 	bl	8001a14 <HAL_RCC_ClockConfig>
 80029a8:	4605      	mov	r5, r0
 80029aa:	b100      	cbz	r0, 80029ae <SystemClock_Config+0x7e>
 80029ac:	e7fe      	b.n	80029ac <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80029ae:	f7ff f8cb 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 80029b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80029ba:	f7fe fce5 	bl	8001388 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80029be:	4620      	mov	r0, r4
 80029c0:	f7fe fcf8 	bl	80013b4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029c4:	462a      	mov	r2, r5
 80029c6:	4629      	mov	r1, r5
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029cc:	f7fe fc9c 	bl	8001308 <HAL_NVIC_SetPriority>
}
 80029d0:	b015      	add	sp, #84	; 0x54
 80029d2:	bd30      	pop	{r4, r5, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000

080029dc <main>:
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b09e      	sub	sp, #120	; 0x78
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029e0:	2400      	movs	r4, #0
  HAL_Init();
 80029e2:	f7fe f9db 	bl	8000d9c <HAL_Init>
  SystemClock_Config();
 80029e6:	f7ff ffa3 	bl	8002930 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029ea:	4b9f      	ldr	r3, [pc, #636]	; (8002c68 <main+0x28c>)
 80029ec:	9404      	str	r4, [sp, #16]
 80029ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80029f0:	489e      	ldr	r0, [pc, #632]	; (8002c6c <main+0x290>)
  hadc1.Instance = ADC1;
 80029f2:	4d9f      	ldr	r5, [pc, #636]	; (8002c70 <main+0x294>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
 80029fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002a00:	9204      	str	r2, [sp, #16]
 8002a02:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a04:	9405      	str	r4, [sp, #20]
 8002a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a10:	f002 0201 	and.w	r2, r2, #1
 8002a14:	9205      	str	r2, [sp, #20]
 8002a16:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a18:	9406      	str	r4, [sp, #24]
 8002a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1c:	f042 0210 	orr.w	r2, r2, #16
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
 8002a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a24:	f002 0210 	and.w	r2, r2, #16
 8002a28:	9206      	str	r2, [sp, #24]
 8002a2a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2c:	9407      	str	r4, [sp, #28]
 8002a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a30:	f042 0202 	orr.w	r2, r2, #2
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
 8002a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a38:	f002 0202 	and.w	r2, r2, #2
 8002a3c:	9207      	str	r2, [sp, #28]
 8002a3e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a40:	9408      	str	r4, [sp, #32]
 8002a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a44:	f042 0208 	orr.w	r2, r2, #8
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4c:	f002 0208 	and.w	r2, r2, #8
 8002a50:	9208      	str	r2, [sp, #32]
 8002a52:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a54:	9409      	str	r4, [sp, #36]	; 0x24
 8002a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a58:	f042 0204 	orr.w	r2, r2, #4
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002a66:	4622      	mov	r2, r4
 8002a68:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002a6c:	f7fe fe0c 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_6, GPIO_PIN_RESET);
 8002a70:	4622      	mov	r2, r4
 8002a72:	f241 0141 	movw	r1, #4161	; 0x1041
 8002a76:	487f      	ldr	r0, [pc, #508]	; (8002c74 <main+0x298>)
 8002a78:	f7fe fe06 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a82:	487d      	ldr	r0, [pc, #500]	; (8002c78 <main+0x29c>)
 8002a84:	f7fe fe00 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8002a88:	4622      	mov	r2, r4
 8002a8a:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8002a8e:	487b      	ldr	r0, [pc, #492]	; (8002c7c <main+0x2a0>)
 8002a90:	f7fe fdfa 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002a94:	4622      	mov	r2, r4
 8002a96:	2103      	movs	r1, #3
 8002a98:	4879      	ldr	r0, [pc, #484]	; (8002c80 <main+0x2a4>)
 8002a9a:	f7fe fdf5 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002aa0:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	a917      	add	r1, sp, #92	; 0x5c
 8002aa4:	4871      	ldr	r0, [pc, #452]	; (8002c6c <main+0x290>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002aa6:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa8:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aae:	f7fe fd05 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD0 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_6;
 8002ab2:	f241 0341 	movw	r3, #4161	; 0x1041
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ab6:	a917      	add	r1, sp, #92	; 0x5c
 8002ab8:	486e      	ldr	r0, [pc, #440]	; (8002c74 <main+0x298>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_6;
 8002aba:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002abc:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ac2:	f7fe fcfb 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aca:	a917      	add	r1, sp, #92	; 0x5c
 8002acc:	486a      	ldr	r0, [pc, #424]	; (8002c78 <main+0x29c>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ace:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad0:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad6:	f7fe fcf1 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8002ada:	2314      	movs	r3, #20
 8002adc:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ade:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <main+0x2a8>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae2:	4864      	ldr	r0, [pc, #400]	; (8002c74 <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ae4:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae8:	f7fe fce8 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8002aec:	f44f 732a 	mov.w	r3, #680	; 0x2a8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	a917      	add	r1, sp, #92	; 0x5c
 8002af2:	4862      	ldr	r0, [pc, #392]	; (8002c7c <main+0x2a0>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8002af4:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af6:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afc:	f7fe fcde 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b00:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b02:	a917      	add	r1, sp, #92	; 0x5c
 8002b04:	485e      	ldr	r0, [pc, #376]	; (8002c80 <main+0x2a4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b06:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b08:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b0e:	f7fe fcd5 	bl	80014bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002b12:	4622      	mov	r2, r4
 8002b14:	4621      	mov	r1, r4
 8002b16:	2008      	movs	r0, #8
 8002b18:	f7fe fbf6 	bl	8001308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b1c:	2008      	movs	r0, #8
 8002b1e:	f7fe fc27 	bl	8001370 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002b22:	4622      	mov	r2, r4
 8002b24:	4621      	mov	r1, r4
 8002b26:	200a      	movs	r0, #10
 8002b28:	f7fe fbee 	bl	8001308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002b2c:	200a      	movs	r0, #10
 8002b2e:	f7fe fc1f 	bl	8001370 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b32:	4b55      	ldr	r3, [pc, #340]	; (8002c88 <main+0x2ac>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b34:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b36:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8002b3a:	e885 4008 	stmia.w	r5, {r3, lr}
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b42:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b44:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8002b46:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
  hadc1.Init.ScanConvMode = ENABLE;
 8002b4a:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b4c:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b4e:	622c      	str	r4, [r5, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8002b50:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b52:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b54:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b56:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b58:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b5a:	f7fe f95f 	bl	8000e1c <HAL_ADC_Init>
 8002b5e:	b100      	cbz	r0, 8002b62 <main+0x186>
 8002b60:	e7fe      	b.n	8002b60 <main+0x184>
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8002b62:	2305      	movs	r3, #5
 8002b64:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b66:	a910      	add	r1, sp, #64	; 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_12CYCLES;
 8002b68:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b6c:	4628      	mov	r0, r5
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_12CYCLES;
 8002b6e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b70:	f7fe fb90 	bl	8001294 <HAL_ADCEx_MultiModeConfigChannel>
 8002b74:	b100      	cbz	r0, 8002b78 <main+0x19c>
 8002b76:	e7fe      	b.n	8002b76 <main+0x19a>
  sConfig.Channel = ADC_CHANNEL_1;
 8002b78:	9617      	str	r6, [sp, #92]	; 0x5c
  sConfig.Rank = 1;
 8002b7a:	9618      	str	r6, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b7c:	a917      	add	r1, sp, #92	; 0x5c
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002b7e:	2604      	movs	r6, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b80:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002b82:	9619      	str	r6, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b84:	f7fe faee 	bl	8001164 <HAL_ADC_ConfigChannel>
 8002b88:	b100      	cbz	r0, 8002b8c <main+0x1b0>
 8002b8a:	e7fe      	b.n	8002b8a <main+0x1ae>
  hdac.Instance = DAC;
 8002b8c:	4c3f      	ldr	r4, [pc, #252]	; (8002c8c <main+0x2b0>)
 8002b8e:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <main+0x2b4>)
 8002b90:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7fe fc1f 	bl	80013d6 <HAL_DAC_Init>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	b100      	cbz	r0, 8002b9e <main+0x1c2>
 8002b9c:	e7fe      	b.n	8002b9c <main+0x1c0>
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002b9e:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002ba0:	a917      	add	r1, sp, #92	; 0x5c
 8002ba2:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002ba4:	9617      	str	r6, [sp, #92]	; 0x5c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002ba6:	f7fe fc57 	bl	8001458 <HAL_DAC_ConfigChannel>
 8002baa:	b100      	cbz	r0, 8002bae <main+0x1d2>
 8002bac:	e7fe      	b.n	8002bac <main+0x1d0>
  htim6.Instance = TIM6;
 8002bae:	4c39      	ldr	r4, [pc, #228]	; (8002c94 <main+0x2b8>)
  htim6.Init.Prescaler = 19;
 8002bb0:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <main+0x2bc>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb2:	60a0      	str	r0, [r4, #8]
  htim6.Init.Prescaler = 19;
 8002bb4:	2513      	movs	r5, #19
 8002bb6:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bba:	4620      	mov	r0, r4
  htim6.Init.Period = 44;
 8002bbc:	232c      	movs	r3, #44	; 0x2c
 8002bbe:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bc0:	f7ff fa5c 	bl	800207c <HAL_TIM_Base_Init>
 8002bc4:	b100      	cbz	r0, 8002bc8 <main+0x1ec>
 8002bc6:	e7fe      	b.n	8002bc6 <main+0x1ea>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002bc8:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bca:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bcc:	a917      	add	r1, sp, #92	; 0x5c
 8002bce:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002bd0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bd2:	f7ff fb19 	bl	8002208 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd6:	b100      	cbz	r0, 8002bda <main+0x1fe>
 8002bd8:	e7fe      	b.n	8002bd8 <main+0x1fc>
  huart3.Instance = USART3;
 8002bda:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <main+0x2c0>)
  huart3.Init.BaudRate = 115200;
 8002bdc:	4a30      	ldr	r2, [pc, #192]	; (8002ca0 <main+0x2c4>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bde:	6098      	str	r0, [r3, #8]
  huart3.Init.BaudRate = 115200;
 8002be0:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
 8002be4:	e883 0084 	stmia.w	r3, {r2, r7}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002be8:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bea:	6118      	str	r0, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bec:	220c      	movs	r2, #12
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bee:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf0:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bf2:	4618      	mov	r0, r3
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bf4:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bf6:	f7ff fc6b 	bl	80024d0 <HAL_UART_Init>
 8002bfa:	b100      	cbz	r0, 8002bfe <main+0x222>
 8002bfc:	e7fe      	b.n	8002bfc <main+0x220>
  htim8.Instance = TIM8;
 8002bfe:	4c29      	ldr	r4, [pc, #164]	; (8002ca4 <main+0x2c8>)
  htim8.Init.Prescaler = 41;
 8002c00:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <main+0x2cc>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c02:	60a0      	str	r0, [r4, #8]
  htim8.Init.Prescaler = 41;
 8002c04:	2629      	movs	r6, #41	; 0x29
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c06:	6120      	str	r0, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c08:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c0a:	4620      	mov	r0, r4
  htim8.Init.Prescaler = 41;
 8002c0c:	e884 0048 	stmia.w	r4, {r3, r6}
  htim8.Init.Period = 19;//41,19>200k,167,9>>100k <<< 4,209<<160k
 8002c10:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c12:	f7ff fa33 	bl	800207c <HAL_TIM_Base_Init>
 8002c16:	b100      	cbz	r0, 8002c1a <main+0x23e>
 8002c18:	e7fe      	b.n	8002c18 <main+0x23c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002c1e:	a917      	add	r1, sp, #92	; 0x5c
 8002c20:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c22:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002c24:	f7ff f866 	bl	8001cf4 <HAL_TIM_ConfigClockSource>
 8002c28:	b100      	cbz	r0, 8002c2c <main+0x250>
 8002c2a:	e7fe      	b.n	8002c2a <main+0x24e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c2c:	2620      	movs	r6, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c30:	a910      	add	r1, sp, #64	; 0x40
 8002c32:	481c      	ldr	r0, [pc, #112]	; (8002ca4 <main+0x2c8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c34:	9610      	str	r6, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c36:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c38:	f7ff fae6 	bl	8002208 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3c:	b100      	cbz	r0, 8002c40 <main+0x264>
 8002c3e:	e7fe      	b.n	8002c3e <main+0x262>
  hadc2.Instance = ADC2;
 8002c40:	4c1a      	ldr	r4, [pc, #104]	; (8002cac <main+0x2d0>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <main+0x2d4>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002c44:	60a0      	str	r0, [r4, #8]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c46:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8002c4a:	e884 0028 	stmia.w	r4, {r3, r5}
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002c4e:	61a0      	str	r0, [r4, #24]
  hadc2.Init.ScanConvMode = ENABLE;
 8002c50:	2501      	movs	r5, #1
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002c52:	6220      	str	r0, [r4, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c54:	60e0      	str	r0, [r4, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002c56:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002c58:	4620      	mov	r0, r4
  hadc2.Init.ScanConvMode = ENABLE;
 8002c5a:	6125      	str	r5, [r4, #16]
  hadc2.Init.NbrOfConversion = 1;
 8002c5c:	61e5      	str	r5, [r4, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c5e:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002c60:	f7fe f8dc 	bl	8000e1c <HAL_ADC_Init>
 8002c64:	b330      	cbz	r0, 8002cb4 <main+0x2d8>
 8002c66:	e7fe      	b.n	8002c66 <main+0x28a>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	200002b8 	.word	0x200002b8
 8002c74:	40020c00 	.word	0x40020c00
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020400 	.word	0x40020400
 8002c80:	40021000 	.word	0x40021000
 8002c84:	10110000 	.word	0x10110000
 8002c88:	40012000 	.word	0x40012000
 8002c8c:	20000318 	.word	0x20000318
 8002c90:	40007400 	.word	0x40007400
 8002c94:	2000032c 	.word	0x2000032c
 8002c98:	40001000 	.word	0x40001000
 8002c9c:	200001cc 	.word	0x200001cc
 8002ca0:	40004800 	.word	0x40004800
 8002ca4:	2000017c 	.word	0x2000017c
 8002ca8:	40010400 	.word	0x40010400
 8002cac:	20000220 	.word	0x20000220
 8002cb0:	40012100 	.word	0x40012100
  sConfig.Channel = ADC_CHANNEL_5;
 8002cb4:	2305      	movs	r3, #5
 8002cb6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002cb8:	a917      	add	r1, sp, #92	; 0x5c
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002cba:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002cbc:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 8002cbe:	9518      	str	r5, [sp, #96]	; 0x60
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002cc0:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002cc2:	f7fe fa4f 	bl	8001164 <HAL_ADC_ConfigChannel>
 8002cc6:	b100      	cbz	r0, 8002cca <main+0x2ee>
 8002cc8:	e7fe      	b.n	8002cc8 <main+0x2ec>
  htim1.Instance = TIM1;
 8002cca:	4c38      	ldr	r4, [pc, #224]	; (8002dac <main+0x3d0>)
  htim1.Init.Prescaler = 7;
 8002ccc:	4938      	ldr	r1, [pc, #224]	; (8002db0 <main+0x3d4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cce:	60a0      	str	r0, [r4, #8]
  htim1.Init.Prescaler = 7;
 8002cd0:	2307      	movs	r3, #7
 8002cd2:	e884 000a 	stmia.w	r4, {r1, r3}
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd6:	6120      	str	r0, [r4, #16]
  htim1.Init.Period = 41;
 8002cd8:	2329      	movs	r3, #41	; 0x29
  htim1.Init.RepetitionCounter = 0;
 8002cda:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002cdc:	4620      	mov	r0, r4
  htim1.Init.Period = 41;
 8002cde:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ce0:	f7ff f9cc 	bl	800207c <HAL_TIM_Base_Init>
 8002ce4:	b100      	cbz	r0, 8002ce8 <main+0x30c>
 8002ce6:	e7fe      	b.n	8002ce6 <main+0x30a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce8:	a91e      	add	r1, sp, #120	; 0x78
 8002cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cee:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f7fe fffe 	bl	8001cf4 <HAL_TIM_ConfigClockSource>
 8002cf8:	b100      	cbz	r0, 8002cfc <main+0x320>
 8002cfa:	e7fe      	b.n	8002cfa <main+0x31e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f7ff f9d7 	bl	80020b0 <HAL_TIM_PWM_Init>
 8002d02:	b100      	cbz	r0, 8002d06 <main+0x32a>
 8002d04:	e7fe      	b.n	8002d04 <main+0x328>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d06:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d08:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d0a:	a90a      	add	r1, sp, #40	; 0x28
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7ff fa7b 	bl	8002208 <HAL_TIMEx_MasterConfigSynchronization>
 8002d12:	4602      	mov	r2, r0
 8002d14:	b100      	cbz	r0, 8002d18 <main+0x33c>
 8002d16:	e7fe      	b.n	8002d16 <main+0x33a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d18:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002d1a:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d1c:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d1e:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d20:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d22:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d24:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d26:	a910      	add	r1, sp, #64	; 0x40
 8002d28:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d2a:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d2c:	f7ff fa0a 	bl	8002144 <HAL_TIM_PWM_ConfigChannel>
 8002d30:	b100      	cbz	r0, 8002d34 <main+0x358>
 8002d32:	e7fe      	b.n	8002d32 <main+0x356>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d34:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d36:	9018      	str	r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d38:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d3a:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d3c:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d42:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d44:	a917      	add	r1, sp, #92	; 0x5c
 8002d46:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d48:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d4a:	f7ff fa7f 	bl	800224c <HAL_TIMEx_ConfigBreakDeadTime>
 8002d4e:	4607      	mov	r7, r0
 8002d50:	b100      	cbz	r0, 8002d54 <main+0x378>
 8002d52:	e7fe      	b.n	8002d52 <main+0x376>
  HAL_TIM_MspPostInit(&htim1);
 8002d54:	4620      	mov	r0, r4
 8002d56:	f000 fa51 	bl	80031fc <HAL_TIM_MspPostInit>
   LCD1602_Begin4BIT(GPIOE, GPIO_PIN_0, GPIO_PIN_1, GPIOB, GPIO_PIN_9, GPIO_PIN_7, GPIO_PIN_5, GPIO_PIN_3);
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	9303      	str	r3, [sp, #12]
 8002d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	4629      	mov	r1, r5
 8002d66:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002d6a:	9602      	str	r6, [sp, #8]
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <main+0x3d8>)
 8002d6e:	4812      	ldr	r0, [pc, #72]	; (8002db8 <main+0x3dc>)
 8002d70:	2202      	movs	r2, #2
 8002d72:	f7ff fd35 	bl	80027e0 <LCD1602_Begin4BIT>
   LCD1602_clear();
 8002d76:	f7ff fdc4 	bl	8002902 <LCD1602_clear>
   	LCD1602_1stLine();
 8002d7a:	f7ff fdbc 	bl	80028f6 <LCD1602_1stLine>
   	LCD1602_print("Enkoder Pulse");
 8002d7e:	480f      	ldr	r0, [pc, #60]	; (8002dbc <main+0x3e0>)
 8002d80:	f7ff fd92 	bl	80028a8 <LCD1602_print>
   	LCD1602_2ndLine();
 8002d84:	f7ff fdba 	bl	80028fc <LCD1602_2ndLine>
   	LCD1602_print("Degeri:");
 8002d88:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <main+0x3e4>)
 8002d8a:	f7ff fd8d 	bl	80028a8 <LCD1602_print>
   	  HAL_ADC_Start_IT(&hadc1);
 8002d8e:	480d      	ldr	r0, [pc, #52]	; (8002dc4 <main+0x3e8>)
 8002d90:	f7fe f8e8 	bl	8000f64 <HAL_ADC_Start_IT>
   	  HAL_TIM_Base_Start(&htim8);
 8002d94:	480c      	ldr	r0, [pc, #48]	; (8002dc8 <main+0x3ec>)
 8002d96:	f7fe ff9f 	bl	8001cd8 <HAL_TIM_Base_Start>
   	HAL_TIM_Base_Start(&htim6);
 8002d9a:	480c      	ldr	r0, [pc, #48]	; (8002dcc <main+0x3f0>)
 8002d9c:	f7fe ff9c 	bl	8001cd8 <HAL_TIM_Base_Start>
   	  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8002da0:	4639      	mov	r1, r7
 8002da2:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <main+0x3f4>)
 8002da4:	f7fe fb2a 	bl	80013fc <HAL_DAC_Start>
 8002da8:	e7fe      	b.n	8002da8 <main+0x3cc>
 8002daa:	bf00      	nop
 8002dac:	20000368 	.word	0x20000368
 8002db0:	40010000 	.word	0x40010000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	08003fdf 	.word	0x08003fdf
 8002dc0:	08003fed 	.word	0x08003fed
 8002dc4:	200002b8 	.word	0x200002b8
 8002dc8:	2000017c 	.word	0x2000017c
 8002dcc:	2000032c 	.word	0x2000032c
 8002dd0:	20000318 	.word	0x20000318

08002dd4 <HAL_ADC_ConvCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b570      	push	{r4, r5, r6, lr}
	//adc_data1[adc_Complete] = HAL_ADC_GetValue(&hadc1);
	adc_data1[0] = HAL_ADC_GetValue(&hadc1);
 8002dd6:	4884      	ldr	r0, [pc, #528]	; (8002fe8 <HAL_ADC_ConvCpltCallback+0x214>)
 8002dd8:	4c84      	ldr	r4, [pc, #528]	; (8002fec <HAL_ADC_ConvCpltCallback+0x218>)
 8002dda:	f7fe f929 	bl	8001030 <HAL_ADC_GetValue>
	//htim1.Instance->CCR1 =1;
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002dde:	2140      	movs	r1, #64	; 0x40
	adc_data1[0] = HAL_ADC_GetValue(&hadc1);
 8002de0:	8020      	strh	r0, [r4, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002de2:	4883      	ldr	r0, [pc, #524]	; (8002ff0 <HAL_ADC_ConvCpltCallback+0x21c>)
 8002de4:	f7fe fc55 	bl	8001692 <HAL_GPIO_TogglePin>
		adc_Complete=0;
	}*/

	/*if (adc_Periyod %2 == 0)
	{*/
		Vin = adc_data1[0];
 8002de8:	8823      	ldrh	r3, [r4, #0]
 8002dea:	4a82      	ldr	r2, [pc, #520]	; (8002ff4 <HAL_ADC_ConvCpltCallback+0x220>)
 8002dec:	ee07 3a90 	vmov	s15, r3
 8002df0:	4b81      	ldr	r3, [pc, #516]	; (8002ff8 <HAL_ADC_ConvCpltCallback+0x224>)
 8002df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df6:	edc3 7a00 	vstr	s15, [r3]
		//Vbd = adc_data1[1];

		if(cosT == 1)
 8002dfa:	4b80      	ldr	r3, [pc, #512]	; (8002ffc <HAL_ADC_ConvCpltCallback+0x228>)
 8002dfc:	8819      	ldrh	r1, [r3, #0]
 8002dfe:	2901      	cmp	r1, #1
 8002e00:	f040 80cf 	bne.w	8002fa2 <HAL_ADC_ConvCpltCallback+0x1ce>
		{
			Demul = Vin * cosKatsayi[0];
 8002e04:	497e      	ldr	r1, [pc, #504]	; (8003000 <HAL_ADC_ConvCpltCallback+0x22c>)
 8002e06:	f9b1 1000 	ldrsh.w	r1, [r1]
			Demul = Vin * cosKatsayi[1];
		//	Demul_bd = Vbd * cosKatsayi[1];
		}
		if (cosT == 3)
		{
			Demul = Vin * cosKatsayi[2];
 8002e0a:	ee07 1a10 	vmov	s14, r1
 8002e0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e16:	edc2 7a00 	vstr	s15, [r2]
		{
			Demul = Vin * cosKatsayi[3];
		//	Demul_bd =  Vbd * cosKatsayi[3];
			cosT=0;
		}
		cosT = cosT+1;
 8002e1a:	8819      	ldrh	r1, [r3, #0]
 8002e1c:	3101      	adds	r1, #1
 8002e1e:	8019      	strh	r1, [r3, #0]

		kayanData[0]=Demul;//pot
 8002e20:	4b78      	ldr	r3, [pc, #480]	; (8003004 <HAL_ADC_ConvCpltCallback+0x230>)
 8002e22:	6811      	ldr	r1, [r2, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f842 1b40 	str.w	r1, [r2], #64
 8002e2a:	1d19      	adds	r1, r3, #4
		//kayanData_2[0]=Demul_bd;

		for	(int i=1;i<16;i++)
		{
		kayanData[(15-(i-1))] = kayanData[15-i];
 8002e2c:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8002e30:	f842 0d04 	str.w	r0, [r2, #-4]!
		for	(int i=1;i<16;i++)
 8002e34:	4291      	cmp	r1, r2
 8002e36:	d1f9      	bne.n	8002e2c <HAL_ADC_ConvCpltCallback+0x58>
	//	kayanData_2[(15-(i-1))] = kayanData_2[15-i];
		}
		kayanData[0]=0;

		lpf1 = (kayanData[0] * srcB_buf_f32[0])+ (kayanData[1]*srcB_buf_f32[1]) + (kayanData[2] * srcB_buf_f32[2]) + (kayanData[3] * srcB_buf_f32[3]) + (kayanData[4] * srcB_buf_f32[4]) + (kayanData[5] * srcB_buf_f32[5]) + (kayanData[6] * srcB_buf_f32[6]) + (kayanData[7] * srcB_buf_f32[7]) + (kayanData[8]*srcB_buf_f32[8]) + (kayanData[9] * srcB_buf_f32[9]) + (kayanData[10] * srcB_buf_f32[10])+ (kayanData[11] * srcB_buf_f32[11]) + (kayanData[12] * srcB_buf_f32[12]) + (kayanData[13] * srcB_buf_f32[13]) + (kayanData[14] * srcB_buf_f32[14]) + (kayanData[15] * srcB_buf_f32[15]);
 8002e38:	4a73      	ldr	r2, [pc, #460]	; (8003008 <HAL_ADC_ConvCpltCallback+0x234>)
 8002e3a:	ed93 0a01 	vldr	s0, [r3, #4]
 8002e3e:	ed92 7a01 	vldr	s14, [r2, #4]
		kayanData[0]=0;
 8002e42:	eddf 7a72 	vldr	s15, [pc, #456]	; 800300c <HAL_ADC_ConvCpltCallback+0x238>

		caps_atan = atan2f(lpf1,lpf1_bd);
		aci_Degeri = (caps_atan * 180) / pi;
		//adc_Complete++;

		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1, DAC_ALIGN_12B_R, analogAci);
 8002e46:	4c72      	ldr	r4, [pc, #456]	; (8003010 <HAL_ADC_ConvCpltCallback+0x23c>)
		kayanData[0]=0;
 8002e48:	edc3 7a00 	vstr	s15, [r3]
		lpf1 = (kayanData[0] * srcB_buf_f32[0])+ (kayanData[1]*srcB_buf_f32[1]) + (kayanData[2] * srcB_buf_f32[2]) + (kayanData[3] * srcB_buf_f32[3]) + (kayanData[4] * srcB_buf_f32[4]) + (kayanData[5] * srcB_buf_f32[5]) + (kayanData[6] * srcB_buf_f32[6]) + (kayanData[7] * srcB_buf_f32[7]) + (kayanData[8]*srcB_buf_f32[8]) + (kayanData[9] * srcB_buf_f32[9]) + (kayanData[10] * srcB_buf_f32[10])+ (kayanData[11] * srcB_buf_f32[11]) + (kayanData[12] * srcB_buf_f32[12]) + (kayanData[13] * srcB_buf_f32[13]) + (kayanData[14] * srcB_buf_f32[14]) + (kayanData[15] * srcB_buf_f32[15]);
 8002e4c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002e50:	ed92 7a00 	vldr	s14, [r2]
		aci_Degeri = (caps_atan * 180) / pi;
 8002e54:	4d6f      	ldr	r5, [pc, #444]	; (8003014 <HAL_ADC_ConvCpltCallback+0x240>)

				 count = bolme /8;

				for (int i=1; i < count; i++)
				{
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 8002e56:	4e70      	ldr	r6, [pc, #448]	; (8003018 <HAL_ADC_ConvCpltCallback+0x244>)
		lpf1 = (kayanData[0] * srcB_buf_f32[0])+ (kayanData[1]*srcB_buf_f32[1]) + (kayanData[2] * srcB_buf_f32[2]) + (kayanData[3] * srcB_buf_f32[3]) + (kayanData[4] * srcB_buf_f32[4]) + (kayanData[5] * srcB_buf_f32[5]) + (kayanData[6] * srcB_buf_f32[6]) + (kayanData[7] * srcB_buf_f32[7]) + (kayanData[8]*srcB_buf_f32[8]) + (kayanData[9] * srcB_buf_f32[9]) + (kayanData[10] * srcB_buf_f32[10])+ (kayanData[11] * srcB_buf_f32[11]) + (kayanData[12] * srcB_buf_f32[12]) + (kayanData[13] * srcB_buf_f32[13]) + (kayanData[14] * srcB_buf_f32[14]) + (kayanData[15] * srcB_buf_f32[15]);
 8002e58:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002e5c:	edd2 7a02 	vldr	s15, [r2, #8]
 8002e60:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e64:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002e68:	edd2 7a03 	vldr	s15, [r2, #12]
 8002e6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e70:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002e74:	edd2 7a04 	vldr	s15, [r2, #16]
 8002e78:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e7c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002e80:	edd2 7a05 	vldr	s15, [r2, #20]
 8002e84:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e88:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002e8c:	edd2 7a06 	vldr	s15, [r2, #24]
 8002e90:	ed93 7a06 	vldr	s14, [r3, #24]
 8002e94:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002e98:	edd2 7a07 	vldr	s15, [r2, #28]
 8002e9c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ea0:	eea7 0a27 	vfma.f32	s0, s14, s15

 8002ea4:	edd2 7a08 	vldr	s15, [r2, #32]
 8002ea8:	ed93 7a08 	vldr	s14, [r3, #32]
 8002eac:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002eb0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8002eb4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002eb8:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002ebc:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8002ec0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002ec4:	eea7 0a27 	vfma.f32	s0, s14, s15
		caps_atan = atan2f(lpf1,lpf1_bd);
 8002ec8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8002ecc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002ed0:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002ed4:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8002ed8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002edc:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002ee0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8002ee4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002ee8:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002eec:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8002ef0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002ef4:	eea7 0a27 	vfma.f32	s0, s14, s15
		aci_Degeri = (caps_atan * 180) / pi;
 8002ef8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002efc:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
		lpf1 = (kayanData[0] * srcB_buf_f32[0])+ (kayanData[1]*srcB_buf_f32[1]) + (kayanData[2] * srcB_buf_f32[2]) + (kayanData[3] * srcB_buf_f32[3]) + (kayanData[4] * srcB_buf_f32[4]) + (kayanData[5] * srcB_buf_f32[5]) + (kayanData[6] * srcB_buf_f32[6]) + (kayanData[7] * srcB_buf_f32[7]) + (kayanData[8]*srcB_buf_f32[8]) + (kayanData[9] * srcB_buf_f32[9]) + (kayanData[10] * srcB_buf_f32[10])+ (kayanData[11] * srcB_buf_f32[11]) + (kayanData[12] * srcB_buf_f32[12]) + (kayanData[13] * srcB_buf_f32[13]) + (kayanData[14] * srcB_buf_f32[14]) + (kayanData[15] * srcB_buf_f32[15]);
 8002f00:	4b46      	ldr	r3, [pc, #280]	; (800301c <HAL_ADC_ConvCpltCallback+0x248>)
		aci_Degeri = (caps_atan * 180) / pi;
 8002f02:	eea7 0a27 	vfma.f32	s0, s14, s15
		lpf1 = (kayanData[0] * srcB_buf_f32[0])+ (kayanData[1]*srcB_buf_f32[1]) + (kayanData[2] * srcB_buf_f32[2]) + (kayanData[3] * srcB_buf_f32[3]) + (kayanData[4] * srcB_buf_f32[4]) + (kayanData[5] * srcB_buf_f32[5]) + (kayanData[6] * srcB_buf_f32[6]) + (kayanData[7] * srcB_buf_f32[7]) + (kayanData[8]*srcB_buf_f32[8]) + (kayanData[9] * srcB_buf_f32[9]) + (kayanData[10] * srcB_buf_f32[10])+ (kayanData[11] * srcB_buf_f32[11]) + (kayanData[12] * srcB_buf_f32[12]) + (kayanData[13] * srcB_buf_f32[13]) + (kayanData[14] * srcB_buf_f32[14]) + (kayanData[15] * srcB_buf_f32[15]);
 8002f06:	ed83 0a00 	vstr	s0, [r3]
		caps_atan = atan2f(lpf1,lpf1_bd);
 8002f0a:	4b45      	ldr	r3, [pc, #276]	; (8003020 <HAL_ADC_ConvCpltCallback+0x24c>)
 8002f0c:	edd3 0a00 	vldr	s1, [r3]
 8002f10:	f000 febf 	bl	8003c92 <atan2f>
 8002f14:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_ADC_ConvCpltCallback+0x250>)
		aci_Degeri = (caps_atan * 180) / pi;
 8002f16:	eddf 7a44 	vldr	s15, [pc, #272]	; 8003028 <HAL_ADC_ConvCpltCallback+0x254>
		caps_atan = atan2f(lpf1,lpf1_bd);
 8002f1a:	ed83 0a00 	vstr	s0, [r3]
		aci_Degeri = (caps_atan * 180) / pi;
 8002f1e:	4b43      	ldr	r3, [pc, #268]	; (800302c <HAL_ADC_ConvCpltCallback+0x258>)
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1, DAC_ALIGN_12B_R, analogAci);
 8002f20:	4843      	ldr	r0, [pc, #268]	; (8003030 <HAL_ADC_ConvCpltCallback+0x25c>)
		aci_Degeri = (caps_atan * 180) / pi;
 8002f22:	ed93 7a00 	vldr	s14, [r3]
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1, DAC_ALIGN_12B_R, analogAci);
 8002f26:	6823      	ldr	r3, [r4, #0]
		aci_Degeri = (caps_atan * 180) / pi;
 8002f28:	ee20 0a27 	vmul.f32	s0, s0, s15
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1, DAC_ALIGN_12B_R, analogAci);
 8002f2c:	2200      	movs	r2, #0
		aci_Degeri = (caps_atan * 180) / pi;
 8002f2e:	eec0 7a07 	vdiv.f32	s15, s0, s14
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1, DAC_ALIGN_12B_R, analogAci);
 8002f32:	4611      	mov	r1, r2
		aci_Degeri = (caps_atan * 180) / pi;
 8002f34:	edc5 7a00 	vstr	s15, [r5]
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1, DAC_ALIGN_12B_R, analogAci);
 8002f38:	f7fe faae 	bl	8001498 <HAL_DAC_SetValue>
					if (aci_Degeri <= 0 )
 8002f3c:	edd5 7a00 	vldr	s15, [r5]
 8002f40:	4b3c      	ldr	r3, [pc, #240]	; (8003034 <HAL_ADC_ConvCpltCallback+0x260>)
					bolme = (sabit * aciBolme )/360;
 8002f42:	4a3d      	ldr	r2, [pc, #244]	; (8003038 <HAL_ADC_ConvCpltCallback+0x264>)
 8002f44:	483d      	ldr	r0, [pc, #244]	; (800303c <HAL_ADC_ConvCpltCallback+0x268>)
 8002f46:	8812      	ldrh	r2, [r2, #0]
					if (aci_Degeri <= 0 )
 8002f48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						aciBolme = aci_Degeri * -1;
 8002f50:	bf9c      	itt	ls
 8002f52:	eeb1 7a67 	vnegls.f32	s14, s15
 8002f56:	eebd 7ac7 	vcvtls.s32.f32	s14, s14
					if (aci_Degeri >0)
 8002f5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
						aciBolme = aci_Degeri * -1;
 8002f5e:	bf98      	it	ls
 8002f60:	ed83 7a00 	vstrls	s14, [r3]
					if (aci_Degeri >0)
 8002f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						aciBolme = aci_Degeri;
 8002f68:	bfc8      	it	gt
 8002f6a:	eefd 7ae7 	vcvtgt.s32.f32	s15, s15
					bolme = (sabit * aciBolme )/360;
 8002f6e:	f44f 71b4 	mov.w	r1, #360	; 0x168
						aciBolme = aci_Degeri;
 8002f72:	bfc8      	it	gt
 8002f74:	edc3 7a00 	vstrgt	s15, [r3]
					bolme = (sabit * aciBolme )/360;
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	435a      	muls	r2, r3
					analogAci=(4095*aciBolme)/360;
 8002f7c:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8002f80:	fb93 f3f1 	sdiv	r3, r3, r1
 8002f84:	6023      	str	r3, [r4, #0]
				 count = bolme /8;
 8002f86:	4c2e      	ldr	r4, [pc, #184]	; (8003040 <HAL_ADC_ConvCpltCallback+0x26c>)
					bolme = (sabit * aciBolme )/360;
 8002f88:	fb92 f5f1 	sdiv	r5, r2, r1
				 count = bolme /8;
 8002f8c:	f44f 6134 	mov.w	r1, #2880	; 0xb40
					bolme = (sabit * aciBolme )/360;
 8002f90:	6005      	str	r5, [r0, #0]
				 count = bolme /8;
 8002f92:	fb92 f2f1 	sdiv	r2, r2, r1
				for (int i=1; i < count; i++)
 8002f96:	2501      	movs	r5, #1
				 count = bolme /8;
 8002f98:	6022      	str	r2, [r4, #0]
				for (int i=1; i < count; i++)
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	429d      	cmp	r5, r3
 8002f9e:	db1d      	blt.n	8002fdc <HAL_ADC_ConvCpltCallback+0x208>
				}
				//adc_Complete=0;


		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
}
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
		if (cosT == 2)
 8002fa2:	2902      	cmp	r1, #2
 8002fa4:	d103      	bne.n	8002fae <HAL_ADC_ConvCpltCallback+0x1da>
			Demul = Vin * cosKatsayi[1];
 8002fa6:	4916      	ldr	r1, [pc, #88]	; (8003000 <HAL_ADC_ConvCpltCallback+0x22c>)
 8002fa8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8002fac:	e72d      	b.n	8002e0a <HAL_ADC_ConvCpltCallback+0x36>
		if (cosT == 3)
 8002fae:	2903      	cmp	r1, #3
 8002fb0:	d103      	bne.n	8002fba <HAL_ADC_ConvCpltCallback+0x1e6>
			Demul = Vin * cosKatsayi[2];
 8002fb2:	4913      	ldr	r1, [pc, #76]	; (8003000 <HAL_ADC_ConvCpltCallback+0x22c>)
 8002fb4:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8002fb8:	e727      	b.n	8002e0a <HAL_ADC_ConvCpltCallback+0x36>
		if (cosT == 4)
 8002fba:	2904      	cmp	r1, #4
 8002fbc:	f47f af2d 	bne.w	8002e1a <HAL_ADC_ConvCpltCallback+0x46>
			Demul = Vin * cosKatsayi[3];
 8002fc0:	490f      	ldr	r1, [pc, #60]	; (8003000 <HAL_ADC_ConvCpltCallback+0x22c>)
 8002fc2:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8002fc6:	ee07 1a10 	vmov	s14, r1
 8002fca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			cosT=0;
 8002fce:	2100      	movs	r1, #0
			Demul = Vin * cosKatsayi[3];
 8002fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
			cosT=0;
 8002fd4:	8019      	strh	r1, [r3, #0]
			Demul = Vin * cosKatsayi[3];
 8002fd6:	edc2 7a00 	vstr	s15, [r2]
 8002fda:	e71e      	b.n	8002e1a <HAL_ADC_ConvCpltCallback+0x46>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4630      	mov	r0, r6
 8002fe0:	f7fe fb57 	bl	8001692 <HAL_GPIO_TogglePin>
				for (int i=1; i < count; i++)
 8002fe4:	3501      	adds	r5, #1
 8002fe6:	e7d8      	b.n	8002f9a <HAL_ADC_ConvCpltCallback+0x1c6>
 8002fe8:	200002b8 	.word	0x200002b8
 8002fec:	2000010c 	.word	0x2000010c
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	20000314 	.word	0x20000314
 8002ff8:	20000100 	.word	0x20000100
 8002ffc:	20000012 	.word	0x20000012
 8003000:	2000000a 	.word	0x2000000a
 8003004:	2000011c 	.word	0x2000011c
 8003008:	2000001c 	.word	0x2000001c
 800300c:	00000000 	.word	0x00000000
 8003010:	20000110 	.word	0x20000110
 8003014:	20000108 	.word	0x20000108
 8003018:	40020c00 	.word	0x40020c00
 800301c:	2000015c 	.word	0x2000015c
 8003020:	20000160 	.word	0x20000160
 8003024:	20000118 	.word	0x20000118
 8003028:	43340000 	.word	0x43340000
 800302c:	20000018 	.word	0x20000018
 8003030:	20000318 	.word	0x20000318
 8003034:	20000104 	.word	0x20000104
 8003038:	20000164 	.word	0x20000164
 800303c:	20000114 	.word	0x20000114
 8003040:	20000014 	.word	0x20000014

08003044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003044:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003046:	2003      	movs	r0, #3
 8003048:	f7fe f94c 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	4611      	mov	r1, r2
 8003050:	f06f 000b 	mvn.w	r0, #11
 8003054:	f7fe f958 	bl	8001308 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	4611      	mov	r1, r2
 800305c:	f06f 000a 	mvn.w	r0, #10
 8003060:	f7fe f952 	bl	8001308 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003064:	2200      	movs	r2, #0
 8003066:	4611      	mov	r1, r2
 8003068:	f06f 0009 	mvn.w	r0, #9
 800306c:	f7fe f94c 	bl	8001308 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003070:	2200      	movs	r2, #0
 8003072:	4611      	mov	r1, r2
 8003074:	f06f 0004 	mvn.w	r0, #4
 8003078:	f7fe f946 	bl	8001308 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800307c:	2200      	movs	r2, #0
 800307e:	4611      	mov	r1, r2
 8003080:	f06f 0003 	mvn.w	r0, #3
 8003084:	f7fe f940 	bl	8001308 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003088:	2200      	movs	r2, #0
 800308a:	4611      	mov	r1, r2
 800308c:	f06f 0001 	mvn.w	r0, #1
 8003090:	f7fe f93a 	bl	8001308 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	4611      	mov	r1, r2
 8003098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800309c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80030a0:	f7fe b932 	b.w	8001308 <HAL_NVIC_SetPriority>

080030a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030a4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80030a6:	6803      	ldr	r3, [r0, #0]
 80030a8:	4a19      	ldr	r2, [pc, #100]	; (8003110 <HAL_ADC_MspInit+0x6c>)
 80030aa:	4293      	cmp	r3, r2
{
 80030ac:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 80030ae:	d11e      	bne.n	80030ee <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030b0:	4b18      	ldr	r3, [pc, #96]	; (8003114 <HAL_ADC_MspInit+0x70>)
 80030b2:	2400      	movs	r4, #0
 80030b4:	9401      	str	r4, [sp, #4]
 80030b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030c8:	2302      	movs	r3, #2
    __HAL_RCC_ADC2_CLK_ENABLE();
  
    /**ADC2 GPIO Configuration    
    PA5     ------> ADC2_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ce:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d0:	4811      	ldr	r0, [pc, #68]	; (8003118 <HAL_ADC_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d6:	f7fe f9f1 	bl	80014bc <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80030da:	2012      	movs	r0, #18
 80030dc:	4622      	mov	r2, r4
 80030de:	4621      	mov	r1, r4
 80030e0:	f7fe f912 	bl	8001308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80030e4:	2012      	movs	r0, #18
 80030e6:	f7fe f943 	bl	8001370 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80030ea:	b008      	add	sp, #32
 80030ec:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 80030ee:	4a0b      	ldr	r2, [pc, #44]	; (800311c <HAL_ADC_MspInit+0x78>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d1fa      	bne.n	80030ea <HAL_ADC_MspInit+0x46>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_ADC_MspInit+0x70>)
 80030f6:	2400      	movs	r4, #0
 80030f8:	9402      	str	r4, [sp, #8]
 80030fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003100:	645a      	str	r2, [r3, #68]	; 0x44
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003108:	9302      	str	r3, [sp, #8]
 800310a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800310c:	2320      	movs	r3, #32
 800310e:	e7dc      	b.n	80030ca <HAL_ADC_MspInit+0x26>
 8003110:	40012000 	.word	0x40012000
 8003114:	40023800 	.word	0x40023800
 8003118:	40020000 	.word	0x40020000
 800311c:	40012100 	.word	0x40012100

08003120 <HAL_DAC_MspInit>:
  }

}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 8003122:	6802      	ldr	r2, [r0, #0]
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_DAC_MspInit+0x3c>)
 8003126:	429a      	cmp	r2, r3
 8003128:	d115      	bne.n	8003156 <HAL_DAC_MspInit+0x36>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800312a:	2100      	movs	r1, #0
 800312c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003130:	9100      	str	r1, [sp, #0]
 8003132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	480a      	ldr	r0, [pc, #40]	; (8003160 <HAL_DAC_MspInit+0x40>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8003136:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	9103      	str	r1, [sp, #12]
    __HAL_RCC_DAC_CLK_ENABLE();
 8003140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003148:	2310      	movs	r3, #16
 800314a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800314e:	2303      	movs	r3, #3
 8003150:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003152:	f7fe f9b3 	bl	80014bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003156:	b007      	add	sp, #28
 8003158:	f85d fb04 	ldr.w	pc, [sp], #4
 800315c:	40007400 	.word	0x40007400
 8003160:	40020000 	.word	0x40020000

08003164 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003164:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM1)
 8003166:	6803      	ldr	r3, [r0, #0]
 8003168:	4a20      	ldr	r2, [pc, #128]	; (80031ec <HAL_TIM_Base_MspInit+0x88>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10d      	bne.n	800318a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <HAL_TIM_Base_MspInit+0x8c>)
 8003174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003186:	b004      	add	sp, #16
 8003188:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM6)
 800318a:	4a1a      	ldr	r2, [pc, #104]	; (80031f4 <HAL_TIM_Base_MspInit+0x90>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d10c      	bne.n	80031aa <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003190:	2300      	movs	r3, #0
 8003192:	9302      	str	r3, [sp, #8]
 8003194:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <HAL_TIM_Base_MspInit+0x8c>)
 8003196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003198:	f042 0210 	orr.w	r2, r2, #16
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	9302      	str	r3, [sp, #8]
 80031a6:	9b02      	ldr	r3, [sp, #8]
 80031a8:	e7ed      	b.n	8003186 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM8)
 80031aa:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <HAL_TIM_Base_MspInit+0x94>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d1ea      	bne.n	8003186 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031b0:	2400      	movs	r4, #0
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_TIM_Base_MspInit+0x8c>)
 80031b4:	9403      	str	r4, [sp, #12]
 80031b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b8:	f042 0202 	orr.w	r2, r2, #2
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	f003 0302 	and.w	r3, r3, #2
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80031c4:	4622      	mov	r2, r4
 80031c6:	4621      	mov	r1, r4
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031c8:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80031ca:	202c      	movs	r0, #44	; 0x2c
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031cc:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80031ce:	f7fe f89b 	bl	8001308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80031d2:	202c      	movs	r0, #44	; 0x2c
 80031d4:	f7fe f8cc 	bl	8001370 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80031d8:	4622      	mov	r2, r4
 80031da:	4621      	mov	r1, r4
 80031dc:	202d      	movs	r0, #45	; 0x2d
 80031de:	f7fe f893 	bl	8001308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80031e2:	202d      	movs	r0, #45	; 0x2d
 80031e4:	f7fe f8c4 	bl	8001370 <HAL_NVIC_EnableIRQ>
}
 80031e8:	e7cd      	b.n	8003186 <HAL_TIM_Base_MspInit+0x22>
 80031ea:	bf00      	nop
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40001000 	.word	0x40001000
 80031f8:	40010400 	.word	0x40010400

080031fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80031fe:	6802      	ldr	r2, [r0, #0]
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_TIM_MspPostInit+0x2c>)
 8003202:	429a      	cmp	r2, r3
 8003204:	d10d      	bne.n	8003222 <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM1_MspPostInit 0 */
  
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800320a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003216:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003218:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800321a:	4804      	ldr	r0, [pc, #16]	; (800322c <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800321c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800321e:	f7fe f94d 	bl	80014bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003222:	b007      	add	sp, #28
 8003224:	f85d fb04 	ldr.w	pc, [sp], #4
 8003228:	40010000 	.word	0x40010000
 800322c:	40021000 	.word	0x40021000

08003230 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003230:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 8003232:	6802      	ldr	r2, [r0, #0]
 8003234:	4b10      	ldr	r3, [pc, #64]	; (8003278 <HAL_UART_MspInit+0x48>)
 8003236:	429a      	cmp	r2, r3
 8003238:	d11a      	bne.n	8003270 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003240:	480f      	ldr	r0, [pc, #60]	; (8003280 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003244:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003254:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003258:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800325e:	2301      	movs	r3, #1
 8003260:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003262:	2303      	movs	r3, #3
 8003264:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003266:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003268:	2307      	movs	r3, #7
 800326a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326c:	f7fe f926 	bl	80014bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003270:	b007      	add	sp, #28
 8003272:	f85d fb04 	ldr.w	pc, [sp], #4
 8003276:	bf00      	nop
 8003278:	40004800 	.word	0x40004800
 800327c:	40023800 	.word	0x40023800
 8003280:	40020400 	.word	0x40020400

08003284 <NMI_Handler>:
 8003284:	4770      	bx	lr

08003286 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003286:	e7fe      	b.n	8003286 <HardFault_Handler>

08003288 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003288:	e7fe      	b.n	8003288 <MemManage_Handler>

0800328a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800328a:	e7fe      	b.n	800328a <BusFault_Handler>

0800328c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800328c:	e7fe      	b.n	800328c <UsageFault_Handler>

0800328e <SVC_Handler>:
 800328e:	4770      	bx	lr

08003290 <DebugMon_Handler>:
 8003290:	4770      	bx	lr

08003292 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003292:	4770      	bx	lr

08003294 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003294:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003296:	f7fd fd9b 	bl	8000dd0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800329a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800329e:	f7fe b896 	b.w	80013ce <HAL_SYSTICK_IRQHandler>
	...

080032a4 <EXTI2_IRQHandler>:

/**
* @brief This function handles EXTI line2 interrupt.
*/
void EXTI2_IRQHandler(void)
{
 80032a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_SET)
 80032a6:	2104      	movs	r1, #4
 80032a8:	4810      	ldr	r0, [pc, #64]	; (80032ec <EXTI2_IRQHandler+0x48>)
 80032aa:	f7fe f9e7 	bl	800167c <HAL_GPIO_ReadPin>
 80032ae:	2801      	cmp	r0, #1
 80032b0:	d116      	bne.n	80032e0 <EXTI2_IRQHandler+0x3c>
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 80032b2:	2104      	movs	r1, #4
 80032b4:	480d      	ldr	r0, [pc, #52]	; (80032ec <EXTI2_IRQHandler+0x48>)
 80032b6:	f7fe f9e1 	bl	800167c <HAL_GPIO_ReadPin>
 80032ba:	b188      	cbz	r0, 80032e0 <EXTI2_IRQHandler+0x3c>
		{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		sabit = sabit+100;
 80032bc:	4c0c      	ldr	r4, [pc, #48]	; (80032f0 <EXTI2_IRQHandler+0x4c>)
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80032be:	480b      	ldr	r0, [pc, #44]	; (80032ec <EXTI2_IRQHandler+0x48>)
 80032c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032c4:	f7fe f9e5 	bl	8001692 <HAL_GPIO_TogglePin>
		sabit = sabit+100;
 80032c8:	8823      	ldrh	r3, [r4, #0]
 80032ca:	3364      	adds	r3, #100	; 0x64
 80032cc:	8023      	strh	r3, [r4, #0]
		LCD1602_2ndLine();
 80032ce:	f7ff fb15 	bl	80028fc <LCD1602_2ndLine>
		LCD1602_setCursor(2,8);
 80032d2:	2108      	movs	r1, #8
 80032d4:	2002      	movs	r0, #2
 80032d6:	f7ff fb03 	bl	80028e0 <LCD1602_setCursor>
		LCD1602_PrintInt(sabit);
 80032da:	8820      	ldrh	r0, [r4, #0]
 80032dc:	f7ff fb1a 	bl	8002914 <LCD1602_PrintInt>
		}
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80032e0:	2004      	movs	r0, #4
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80032e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80032e6:	f7fe b9d9 	b.w	800169c <HAL_GPIO_EXTI_IRQHandler>
 80032ea:	bf00      	nop
 80032ec:	40020c00 	.word	0x40020c00
 80032f0:	20000164 	.word	0x20000164

080032f4 <EXTI4_IRQHandler>:

/**
* @brief This function handles EXTI line4 interrupt.
*/
void EXTI4_IRQHandler(void)
{
 80032f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	//for (int i=0; i<1000000;i++);
  /* USER CODE END EXTI4_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_SET)
 80032f6:	2110      	movs	r1, #16
 80032f8:	4810      	ldr	r0, [pc, #64]	; (800333c <EXTI4_IRQHandler+0x48>)
 80032fa:	f7fe f9bf 	bl	800167c <HAL_GPIO_ReadPin>
 80032fe:	2801      	cmp	r0, #1
 8003300:	d116      	bne.n	8003330 <EXTI4_IRQHandler+0x3c>
		{
			if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4))
 8003302:	2110      	movs	r1, #16
 8003304:	480d      	ldr	r0, [pc, #52]	; (800333c <EXTI4_IRQHandler+0x48>)
 8003306:	f7fe f9b9 	bl	800167c <HAL_GPIO_ReadPin>
 800330a:	b188      	cbz	r0, 8003330 <EXTI4_IRQHandler+0x3c>
			{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
			sabit = sabit+1;
 800330c:	4c0c      	ldr	r4, [pc, #48]	; (8003340 <EXTI4_IRQHandler+0x4c>)
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800330e:	480b      	ldr	r0, [pc, #44]	; (800333c <EXTI4_IRQHandler+0x48>)
 8003310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003314:	f7fe f9bd 	bl	8001692 <HAL_GPIO_TogglePin>
			sabit = sabit+1;
 8003318:	8823      	ldrh	r3, [r4, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	8023      	strh	r3, [r4, #0]
			LCD1602_2ndLine();
 800331e:	f7ff faed 	bl	80028fc <LCD1602_2ndLine>
			LCD1602_setCursor(2,8);
 8003322:	2108      	movs	r1, #8
 8003324:	2002      	movs	r0, #2
 8003326:	f7ff fadb 	bl	80028e0 <LCD1602_setCursor>
			LCD1602_PrintInt(sabit);
 800332a:	8820      	ldrh	r0, [r4, #0]
 800332c:	f7ff faf2 	bl	8002914 <LCD1602_PrintInt>
			}
		}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003330:	2010      	movs	r0, #16
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003336:	f7fe b9b1 	b.w	800169c <HAL_GPIO_EXTI_IRQHandler>
 800333a:	bf00      	nop
 800333c:	40020c00 	.word	0x40020c00
 8003340:	20000164 	.word	0x20000164

08003344 <ADC_IRQHandler>:

/**
* @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
*/
void ADC_IRQHandler(void)
{
 8003344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003346:	4804      	ldr	r0, [pc, #16]	; (8003358 <ADC_IRQHandler+0x14>)
 8003348:	f7fd fe77 	bl	800103a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800334c:	4803      	ldr	r0, [pc, #12]	; (800335c <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800334e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8003352:	f7fd be72 	b.w	800103a <HAL_ADC_IRQHandler>
 8003356:	bf00      	nop
 8003358:	200002b8 	.word	0x200002b8
 800335c:	20000220 	.word	0x20000220

08003360 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003360:	4801      	ldr	r0, [pc, #4]	; (8003368 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8003362:	f7fe bd85 	b.w	8001e70 <HAL_TIM_IRQHandler>
 8003366:	bf00      	nop
 8003368:	2000017c 	.word	0x2000017c

0800336c <TIM8_UP_TIM13_IRQHandler>:
 800336c:	f7ff bff8 	b.w	8003360 <TIM8_TRG_COM_TIM14_IRQHandler>

08003370 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003370:	490f      	ldr	r1, [pc, #60]	; (80033b0 <SystemInit+0x40>)
 8003372:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003376:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <SystemInit+0x44>)
 8003380:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003382:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800338a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003392:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003396:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003398:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <SystemInit+0x48>)
 800339a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033a2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80033a4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033aa:	608b      	str	r3, [r1, #8]
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	24003010 	.word	0x24003010

080033bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80033c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80033c2:	e003      	b.n	80033cc <LoopCopyDataInit>

080033c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80033c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80033c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80033ca:	3104      	adds	r1, #4

080033cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80033cc:	480b      	ldr	r0, [pc, #44]	; (80033fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80033d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80033d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80033d4:	d3f6      	bcc.n	80033c4 <CopyDataInit>
  ldr  r2, =_sbss
 80033d6:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80033d8:	e002      	b.n	80033e0 <LoopFillZerobss>

080033da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80033da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80033dc:	f842 3b04 	str.w	r3, [r2], #4

080033e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80033e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80033e4:	d3f9      	bcc.n	80033da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033e6:	f7ff ffc3 	bl	8003370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ea:	f000 f811 	bl	8003410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ee:	f7ff faf5 	bl	80029dc <main>
  bx  lr    
 80033f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80033f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80033f8:	08004070 	.word	0x08004070
  ldr  r0, =_sdata
 80033fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003400:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 8003404:	200000c4 	.word	0x200000c4
  ldr  r3, = _ebss
 8003408:	200003e4 	.word	0x200003e4

0800340c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800340c:	e7fe      	b.n	800340c <CAN1_RX0_IRQHandler>
	...

08003410 <__libc_init_array>:
 8003410:	b570      	push	{r4, r5, r6, lr}
 8003412:	4e0d      	ldr	r6, [pc, #52]	; (8003448 <__libc_init_array+0x38>)
 8003414:	4c0d      	ldr	r4, [pc, #52]	; (800344c <__libc_init_array+0x3c>)
 8003416:	1ba4      	subs	r4, r4, r6
 8003418:	10a4      	asrs	r4, r4, #2
 800341a:	2500      	movs	r5, #0
 800341c:	42a5      	cmp	r5, r4
 800341e:	d109      	bne.n	8003434 <__libc_init_array+0x24>
 8003420:	4e0b      	ldr	r6, [pc, #44]	; (8003450 <__libc_init_array+0x40>)
 8003422:	4c0c      	ldr	r4, [pc, #48]	; (8003454 <__libc_init_array+0x44>)
 8003424:	f000 fdce 	bl	8003fc4 <_init>
 8003428:	1ba4      	subs	r4, r4, r6
 800342a:	10a4      	asrs	r4, r4, #2
 800342c:	2500      	movs	r5, #0
 800342e:	42a5      	cmp	r5, r4
 8003430:	d105      	bne.n	800343e <__libc_init_array+0x2e>
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003438:	4798      	blx	r3
 800343a:	3501      	adds	r5, #1
 800343c:	e7ee      	b.n	800341c <__libc_init_array+0xc>
 800343e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003442:	4798      	blx	r3
 8003444:	3501      	adds	r5, #1
 8003446:	e7f2      	b.n	800342e <__libc_init_array+0x1e>
 8003448:	08004068 	.word	0x08004068
 800344c:	08004068 	.word	0x08004068
 8003450:	08004068 	.word	0x08004068
 8003454:	0800406c 	.word	0x0800406c

08003458 <siprintf>:
 8003458:	b40e      	push	{r1, r2, r3}
 800345a:	b500      	push	{lr}
 800345c:	b09c      	sub	sp, #112	; 0x70
 800345e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003462:	ab1d      	add	r3, sp, #116	; 0x74
 8003464:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003468:	9002      	str	r0, [sp, #8]
 800346a:	9006      	str	r0, [sp, #24]
 800346c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003470:	480a      	ldr	r0, [pc, #40]	; (800349c <siprintf+0x44>)
 8003472:	9104      	str	r1, [sp, #16]
 8003474:	9107      	str	r1, [sp, #28]
 8003476:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800347a:	f853 2b04 	ldr.w	r2, [r3], #4
 800347e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003482:	6800      	ldr	r0, [r0, #0]
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	a902      	add	r1, sp, #8
 8003488:	f000 f866 	bl	8003558 <_svfiprintf_r>
 800348c:	9b02      	ldr	r3, [sp, #8]
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	b01c      	add	sp, #112	; 0x70
 8003494:	f85d eb04 	ldr.w	lr, [sp], #4
 8003498:	b003      	add	sp, #12
 800349a:	4770      	bx	lr
 800349c:	20000060 	.word	0x20000060

080034a0 <__ssputs_r>:
 80034a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a4:	688e      	ldr	r6, [r1, #8]
 80034a6:	429e      	cmp	r6, r3
 80034a8:	4682      	mov	sl, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	4691      	mov	r9, r2
 80034ae:	4698      	mov	r8, r3
 80034b0:	d835      	bhi.n	800351e <__ssputs_r+0x7e>
 80034b2:	898a      	ldrh	r2, [r1, #12]
 80034b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034b8:	d031      	beq.n	800351e <__ssputs_r+0x7e>
 80034ba:	6825      	ldr	r5, [r4, #0]
 80034bc:	6909      	ldr	r1, [r1, #16]
 80034be:	1a6f      	subs	r7, r5, r1
 80034c0:	6965      	ldr	r5, [r4, #20]
 80034c2:	2302      	movs	r3, #2
 80034c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80034cc:	f108 0301 	add.w	r3, r8, #1
 80034d0:	443b      	add	r3, r7
 80034d2:	429d      	cmp	r5, r3
 80034d4:	bf38      	it	cc
 80034d6:	461d      	movcc	r5, r3
 80034d8:	0553      	lsls	r3, r2, #21
 80034da:	d531      	bpl.n	8003540 <__ssputs_r+0xa0>
 80034dc:	4629      	mov	r1, r5
 80034de:	f000 fb39 	bl	8003b54 <_malloc_r>
 80034e2:	4606      	mov	r6, r0
 80034e4:	b950      	cbnz	r0, 80034fc <__ssputs_r+0x5c>
 80034e6:	230c      	movs	r3, #12
 80034e8:	f8ca 3000 	str.w	r3, [sl]
 80034ec:	89a3      	ldrh	r3, [r4, #12]
 80034ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f2:	81a3      	strh	r3, [r4, #12]
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034fc:	463a      	mov	r2, r7
 80034fe:	6921      	ldr	r1, [r4, #16]
 8003500:	f000 fab4 	bl	8003a6c <memcpy>
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800350a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350e:	81a3      	strh	r3, [r4, #12]
 8003510:	6126      	str	r6, [r4, #16]
 8003512:	6165      	str	r5, [r4, #20]
 8003514:	443e      	add	r6, r7
 8003516:	1bed      	subs	r5, r5, r7
 8003518:	6026      	str	r6, [r4, #0]
 800351a:	60a5      	str	r5, [r4, #8]
 800351c:	4646      	mov	r6, r8
 800351e:	4546      	cmp	r6, r8
 8003520:	bf28      	it	cs
 8003522:	4646      	movcs	r6, r8
 8003524:	4632      	mov	r2, r6
 8003526:	4649      	mov	r1, r9
 8003528:	6820      	ldr	r0, [r4, #0]
 800352a:	f000 faaa 	bl	8003a82 <memmove>
 800352e:	68a3      	ldr	r3, [r4, #8]
 8003530:	1b9b      	subs	r3, r3, r6
 8003532:	60a3      	str	r3, [r4, #8]
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	441e      	add	r6, r3
 8003538:	6026      	str	r6, [r4, #0]
 800353a:	2000      	movs	r0, #0
 800353c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003540:	462a      	mov	r2, r5
 8003542:	f000 fb65 	bl	8003c10 <_realloc_r>
 8003546:	4606      	mov	r6, r0
 8003548:	2800      	cmp	r0, #0
 800354a:	d1e1      	bne.n	8003510 <__ssputs_r+0x70>
 800354c:	6921      	ldr	r1, [r4, #16]
 800354e:	4650      	mov	r0, sl
 8003550:	f000 fab2 	bl	8003ab8 <_free_r>
 8003554:	e7c7      	b.n	80034e6 <__ssputs_r+0x46>
	...

08003558 <_svfiprintf_r>:
 8003558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355c:	b09d      	sub	sp, #116	; 0x74
 800355e:	4680      	mov	r8, r0
 8003560:	9303      	str	r3, [sp, #12]
 8003562:	898b      	ldrh	r3, [r1, #12]
 8003564:	061c      	lsls	r4, r3, #24
 8003566:	460d      	mov	r5, r1
 8003568:	4616      	mov	r6, r2
 800356a:	d50f      	bpl.n	800358c <_svfiprintf_r+0x34>
 800356c:	690b      	ldr	r3, [r1, #16]
 800356e:	b96b      	cbnz	r3, 800358c <_svfiprintf_r+0x34>
 8003570:	2140      	movs	r1, #64	; 0x40
 8003572:	f000 faef 	bl	8003b54 <_malloc_r>
 8003576:	6028      	str	r0, [r5, #0]
 8003578:	6128      	str	r0, [r5, #16]
 800357a:	b928      	cbnz	r0, 8003588 <_svfiprintf_r+0x30>
 800357c:	230c      	movs	r3, #12
 800357e:	f8c8 3000 	str.w	r3, [r8]
 8003582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003586:	e0c5      	b.n	8003714 <_svfiprintf_r+0x1bc>
 8003588:	2340      	movs	r3, #64	; 0x40
 800358a:	616b      	str	r3, [r5, #20]
 800358c:	2300      	movs	r3, #0
 800358e:	9309      	str	r3, [sp, #36]	; 0x24
 8003590:	2320      	movs	r3, #32
 8003592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003596:	2330      	movs	r3, #48	; 0x30
 8003598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800359c:	f04f 0b01 	mov.w	fp, #1
 80035a0:	4637      	mov	r7, r6
 80035a2:	463c      	mov	r4, r7
 80035a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d13c      	bne.n	8003626 <_svfiprintf_r+0xce>
 80035ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80035b0:	d00b      	beq.n	80035ca <_svfiprintf_r+0x72>
 80035b2:	4653      	mov	r3, sl
 80035b4:	4632      	mov	r2, r6
 80035b6:	4629      	mov	r1, r5
 80035b8:	4640      	mov	r0, r8
 80035ba:	f7ff ff71 	bl	80034a0 <__ssputs_r>
 80035be:	3001      	adds	r0, #1
 80035c0:	f000 80a3 	beq.w	800370a <_svfiprintf_r+0x1b2>
 80035c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035c6:	4453      	add	r3, sl
 80035c8:	9309      	str	r3, [sp, #36]	; 0x24
 80035ca:	783b      	ldrb	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 809c 	beq.w	800370a <_svfiprintf_r+0x1b2>
 80035d2:	2300      	movs	r3, #0
 80035d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035d8:	9304      	str	r3, [sp, #16]
 80035da:	9307      	str	r3, [sp, #28]
 80035dc:	9205      	str	r2, [sp, #20]
 80035de:	9306      	str	r3, [sp, #24]
 80035e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035e4:	931a      	str	r3, [sp, #104]	; 0x68
 80035e6:	2205      	movs	r2, #5
 80035e8:	7821      	ldrb	r1, [r4, #0]
 80035ea:	4850      	ldr	r0, [pc, #320]	; (800372c <_svfiprintf_r+0x1d4>)
 80035ec:	f7fc fdf0 	bl	80001d0 <memchr>
 80035f0:	1c67      	adds	r7, r4, #1
 80035f2:	9b04      	ldr	r3, [sp, #16]
 80035f4:	b9d8      	cbnz	r0, 800362e <_svfiprintf_r+0xd6>
 80035f6:	06d9      	lsls	r1, r3, #27
 80035f8:	bf44      	itt	mi
 80035fa:	2220      	movmi	r2, #32
 80035fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003600:	071a      	lsls	r2, r3, #28
 8003602:	bf44      	itt	mi
 8003604:	222b      	movmi	r2, #43	; 0x2b
 8003606:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800360a:	7822      	ldrb	r2, [r4, #0]
 800360c:	2a2a      	cmp	r2, #42	; 0x2a
 800360e:	d016      	beq.n	800363e <_svfiprintf_r+0xe6>
 8003610:	9a07      	ldr	r2, [sp, #28]
 8003612:	2100      	movs	r1, #0
 8003614:	200a      	movs	r0, #10
 8003616:	4627      	mov	r7, r4
 8003618:	3401      	adds	r4, #1
 800361a:	783b      	ldrb	r3, [r7, #0]
 800361c:	3b30      	subs	r3, #48	; 0x30
 800361e:	2b09      	cmp	r3, #9
 8003620:	d951      	bls.n	80036c6 <_svfiprintf_r+0x16e>
 8003622:	b1c9      	cbz	r1, 8003658 <_svfiprintf_r+0x100>
 8003624:	e011      	b.n	800364a <_svfiprintf_r+0xf2>
 8003626:	2b25      	cmp	r3, #37	; 0x25
 8003628:	d0c0      	beq.n	80035ac <_svfiprintf_r+0x54>
 800362a:	4627      	mov	r7, r4
 800362c:	e7b9      	b.n	80035a2 <_svfiprintf_r+0x4a>
 800362e:	4a3f      	ldr	r2, [pc, #252]	; (800372c <_svfiprintf_r+0x1d4>)
 8003630:	1a80      	subs	r0, r0, r2
 8003632:	fa0b f000 	lsl.w	r0, fp, r0
 8003636:	4318      	orrs	r0, r3
 8003638:	9004      	str	r0, [sp, #16]
 800363a:	463c      	mov	r4, r7
 800363c:	e7d3      	b.n	80035e6 <_svfiprintf_r+0x8e>
 800363e:	9a03      	ldr	r2, [sp, #12]
 8003640:	1d11      	adds	r1, r2, #4
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	9103      	str	r1, [sp, #12]
 8003646:	2a00      	cmp	r2, #0
 8003648:	db01      	blt.n	800364e <_svfiprintf_r+0xf6>
 800364a:	9207      	str	r2, [sp, #28]
 800364c:	e004      	b.n	8003658 <_svfiprintf_r+0x100>
 800364e:	4252      	negs	r2, r2
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	9207      	str	r2, [sp, #28]
 8003656:	9304      	str	r3, [sp, #16]
 8003658:	783b      	ldrb	r3, [r7, #0]
 800365a:	2b2e      	cmp	r3, #46	; 0x2e
 800365c:	d10e      	bne.n	800367c <_svfiprintf_r+0x124>
 800365e:	787b      	ldrb	r3, [r7, #1]
 8003660:	2b2a      	cmp	r3, #42	; 0x2a
 8003662:	f107 0101 	add.w	r1, r7, #1
 8003666:	d132      	bne.n	80036ce <_svfiprintf_r+0x176>
 8003668:	9b03      	ldr	r3, [sp, #12]
 800366a:	1d1a      	adds	r2, r3, #4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	9203      	str	r2, [sp, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	bfb8      	it	lt
 8003674:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003678:	3702      	adds	r7, #2
 800367a:	9305      	str	r3, [sp, #20]
 800367c:	4c2c      	ldr	r4, [pc, #176]	; (8003730 <_svfiprintf_r+0x1d8>)
 800367e:	7839      	ldrb	r1, [r7, #0]
 8003680:	2203      	movs	r2, #3
 8003682:	4620      	mov	r0, r4
 8003684:	f7fc fda4 	bl	80001d0 <memchr>
 8003688:	b138      	cbz	r0, 800369a <_svfiprintf_r+0x142>
 800368a:	2340      	movs	r3, #64	; 0x40
 800368c:	1b00      	subs	r0, r0, r4
 800368e:	fa03 f000 	lsl.w	r0, r3, r0
 8003692:	9b04      	ldr	r3, [sp, #16]
 8003694:	4303      	orrs	r3, r0
 8003696:	9304      	str	r3, [sp, #16]
 8003698:	3701      	adds	r7, #1
 800369a:	7839      	ldrb	r1, [r7, #0]
 800369c:	4825      	ldr	r0, [pc, #148]	; (8003734 <_svfiprintf_r+0x1dc>)
 800369e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036a2:	2206      	movs	r2, #6
 80036a4:	1c7e      	adds	r6, r7, #1
 80036a6:	f7fc fd93 	bl	80001d0 <memchr>
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d035      	beq.n	800371a <_svfiprintf_r+0x1c2>
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <_svfiprintf_r+0x1e0>)
 80036b0:	b9fb      	cbnz	r3, 80036f2 <_svfiprintf_r+0x19a>
 80036b2:	9b03      	ldr	r3, [sp, #12]
 80036b4:	3307      	adds	r3, #7
 80036b6:	f023 0307 	bic.w	r3, r3, #7
 80036ba:	3308      	adds	r3, #8
 80036bc:	9303      	str	r3, [sp, #12]
 80036be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036c0:	444b      	add	r3, r9
 80036c2:	9309      	str	r3, [sp, #36]	; 0x24
 80036c4:	e76c      	b.n	80035a0 <_svfiprintf_r+0x48>
 80036c6:	fb00 3202 	mla	r2, r0, r2, r3
 80036ca:	2101      	movs	r1, #1
 80036cc:	e7a3      	b.n	8003616 <_svfiprintf_r+0xbe>
 80036ce:	2300      	movs	r3, #0
 80036d0:	9305      	str	r3, [sp, #20]
 80036d2:	4618      	mov	r0, r3
 80036d4:	240a      	movs	r4, #10
 80036d6:	460f      	mov	r7, r1
 80036d8:	3101      	adds	r1, #1
 80036da:	783a      	ldrb	r2, [r7, #0]
 80036dc:	3a30      	subs	r2, #48	; 0x30
 80036de:	2a09      	cmp	r2, #9
 80036e0:	d903      	bls.n	80036ea <_svfiprintf_r+0x192>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ca      	beq.n	800367c <_svfiprintf_r+0x124>
 80036e6:	9005      	str	r0, [sp, #20]
 80036e8:	e7c8      	b.n	800367c <_svfiprintf_r+0x124>
 80036ea:	fb04 2000 	mla	r0, r4, r0, r2
 80036ee:	2301      	movs	r3, #1
 80036f0:	e7f1      	b.n	80036d6 <_svfiprintf_r+0x17e>
 80036f2:	ab03      	add	r3, sp, #12
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	462a      	mov	r2, r5
 80036f8:	4b10      	ldr	r3, [pc, #64]	; (800373c <_svfiprintf_r+0x1e4>)
 80036fa:	a904      	add	r1, sp, #16
 80036fc:	4640      	mov	r0, r8
 80036fe:	f3af 8000 	nop.w
 8003702:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003706:	4681      	mov	r9, r0
 8003708:	d1d9      	bne.n	80036be <_svfiprintf_r+0x166>
 800370a:	89ab      	ldrh	r3, [r5, #12]
 800370c:	065b      	lsls	r3, r3, #25
 800370e:	f53f af38 	bmi.w	8003582 <_svfiprintf_r+0x2a>
 8003712:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003714:	b01d      	add	sp, #116	; 0x74
 8003716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800371a:	ab03      	add	r3, sp, #12
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	462a      	mov	r2, r5
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <_svfiprintf_r+0x1e4>)
 8003722:	a904      	add	r1, sp, #16
 8003724:	4640      	mov	r0, r8
 8003726:	f000 f881 	bl	800382c <_printf_i>
 800372a:	e7ea      	b.n	8003702 <_svfiprintf_r+0x1aa>
 800372c:	0800400d 	.word	0x0800400d
 8003730:	08004013 	.word	0x08004013
 8003734:	08004017 	.word	0x08004017
 8003738:	00000000 	.word	0x00000000
 800373c:	080034a1 	.word	0x080034a1

08003740 <_printf_common>:
 8003740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003744:	4691      	mov	r9, r2
 8003746:	461f      	mov	r7, r3
 8003748:	688a      	ldr	r2, [r1, #8]
 800374a:	690b      	ldr	r3, [r1, #16]
 800374c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003750:	4293      	cmp	r3, r2
 8003752:	bfb8      	it	lt
 8003754:	4613      	movlt	r3, r2
 8003756:	f8c9 3000 	str.w	r3, [r9]
 800375a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800375e:	4606      	mov	r6, r0
 8003760:	460c      	mov	r4, r1
 8003762:	b112      	cbz	r2, 800376a <_printf_common+0x2a>
 8003764:	3301      	adds	r3, #1
 8003766:	f8c9 3000 	str.w	r3, [r9]
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	0699      	lsls	r1, r3, #26
 800376e:	bf42      	ittt	mi
 8003770:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003774:	3302      	addmi	r3, #2
 8003776:	f8c9 3000 	strmi.w	r3, [r9]
 800377a:	6825      	ldr	r5, [r4, #0]
 800377c:	f015 0506 	ands.w	r5, r5, #6
 8003780:	d107      	bne.n	8003792 <_printf_common+0x52>
 8003782:	f104 0a19 	add.w	sl, r4, #25
 8003786:	68e3      	ldr	r3, [r4, #12]
 8003788:	f8d9 2000 	ldr.w	r2, [r9]
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	429d      	cmp	r5, r3
 8003790:	db29      	blt.n	80037e6 <_printf_common+0xa6>
 8003792:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003796:	6822      	ldr	r2, [r4, #0]
 8003798:	3300      	adds	r3, #0
 800379a:	bf18      	it	ne
 800379c:	2301      	movne	r3, #1
 800379e:	0692      	lsls	r2, r2, #26
 80037a0:	d42e      	bmi.n	8003800 <_printf_common+0xc0>
 80037a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037a6:	4639      	mov	r1, r7
 80037a8:	4630      	mov	r0, r6
 80037aa:	47c0      	blx	r8
 80037ac:	3001      	adds	r0, #1
 80037ae:	d021      	beq.n	80037f4 <_printf_common+0xb4>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	68e5      	ldr	r5, [r4, #12]
 80037b4:	f8d9 2000 	ldr.w	r2, [r9]
 80037b8:	f003 0306 	and.w	r3, r3, #6
 80037bc:	2b04      	cmp	r3, #4
 80037be:	bf08      	it	eq
 80037c0:	1aad      	subeq	r5, r5, r2
 80037c2:	68a3      	ldr	r3, [r4, #8]
 80037c4:	6922      	ldr	r2, [r4, #16]
 80037c6:	bf0c      	ite	eq
 80037c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037cc:	2500      	movne	r5, #0
 80037ce:	4293      	cmp	r3, r2
 80037d0:	bfc4      	itt	gt
 80037d2:	1a9b      	subgt	r3, r3, r2
 80037d4:	18ed      	addgt	r5, r5, r3
 80037d6:	f04f 0900 	mov.w	r9, #0
 80037da:	341a      	adds	r4, #26
 80037dc:	454d      	cmp	r5, r9
 80037de:	d11b      	bne.n	8003818 <_printf_common+0xd8>
 80037e0:	2000      	movs	r0, #0
 80037e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e6:	2301      	movs	r3, #1
 80037e8:	4652      	mov	r2, sl
 80037ea:	4639      	mov	r1, r7
 80037ec:	4630      	mov	r0, r6
 80037ee:	47c0      	blx	r8
 80037f0:	3001      	adds	r0, #1
 80037f2:	d103      	bne.n	80037fc <_printf_common+0xbc>
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037fc:	3501      	adds	r5, #1
 80037fe:	e7c2      	b.n	8003786 <_printf_common+0x46>
 8003800:	18e1      	adds	r1, r4, r3
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	2030      	movs	r0, #48	; 0x30
 8003806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800380a:	4422      	add	r2, r4
 800380c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003814:	3302      	adds	r3, #2
 8003816:	e7c4      	b.n	80037a2 <_printf_common+0x62>
 8003818:	2301      	movs	r3, #1
 800381a:	4622      	mov	r2, r4
 800381c:	4639      	mov	r1, r7
 800381e:	4630      	mov	r0, r6
 8003820:	47c0      	blx	r8
 8003822:	3001      	adds	r0, #1
 8003824:	d0e6      	beq.n	80037f4 <_printf_common+0xb4>
 8003826:	f109 0901 	add.w	r9, r9, #1
 800382a:	e7d7      	b.n	80037dc <_printf_common+0x9c>

0800382c <_printf_i>:
 800382c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003830:	4617      	mov	r7, r2
 8003832:	7e0a      	ldrb	r2, [r1, #24]
 8003834:	b085      	sub	sp, #20
 8003836:	2a6e      	cmp	r2, #110	; 0x6e
 8003838:	4698      	mov	r8, r3
 800383a:	4606      	mov	r6, r0
 800383c:	460c      	mov	r4, r1
 800383e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003840:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003844:	f000 80bc 	beq.w	80039c0 <_printf_i+0x194>
 8003848:	d81a      	bhi.n	8003880 <_printf_i+0x54>
 800384a:	2a63      	cmp	r2, #99	; 0x63
 800384c:	d02e      	beq.n	80038ac <_printf_i+0x80>
 800384e:	d80a      	bhi.n	8003866 <_printf_i+0x3a>
 8003850:	2a00      	cmp	r2, #0
 8003852:	f000 80c8 	beq.w	80039e6 <_printf_i+0x1ba>
 8003856:	2a58      	cmp	r2, #88	; 0x58
 8003858:	f000 808a 	beq.w	8003970 <_printf_i+0x144>
 800385c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003860:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003864:	e02a      	b.n	80038bc <_printf_i+0x90>
 8003866:	2a64      	cmp	r2, #100	; 0x64
 8003868:	d001      	beq.n	800386e <_printf_i+0x42>
 800386a:	2a69      	cmp	r2, #105	; 0x69
 800386c:	d1f6      	bne.n	800385c <_printf_i+0x30>
 800386e:	6821      	ldr	r1, [r4, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003876:	d023      	beq.n	80038c0 <_printf_i+0x94>
 8003878:	1d11      	adds	r1, r2, #4
 800387a:	6019      	str	r1, [r3, #0]
 800387c:	6813      	ldr	r3, [r2, #0]
 800387e:	e027      	b.n	80038d0 <_printf_i+0xa4>
 8003880:	2a73      	cmp	r2, #115	; 0x73
 8003882:	f000 80b4 	beq.w	80039ee <_printf_i+0x1c2>
 8003886:	d808      	bhi.n	800389a <_printf_i+0x6e>
 8003888:	2a6f      	cmp	r2, #111	; 0x6f
 800388a:	d02a      	beq.n	80038e2 <_printf_i+0xb6>
 800388c:	2a70      	cmp	r2, #112	; 0x70
 800388e:	d1e5      	bne.n	800385c <_printf_i+0x30>
 8003890:	680a      	ldr	r2, [r1, #0]
 8003892:	f042 0220 	orr.w	r2, r2, #32
 8003896:	600a      	str	r2, [r1, #0]
 8003898:	e003      	b.n	80038a2 <_printf_i+0x76>
 800389a:	2a75      	cmp	r2, #117	; 0x75
 800389c:	d021      	beq.n	80038e2 <_printf_i+0xb6>
 800389e:	2a78      	cmp	r2, #120	; 0x78
 80038a0:	d1dc      	bne.n	800385c <_printf_i+0x30>
 80038a2:	2278      	movs	r2, #120	; 0x78
 80038a4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80038a8:	496e      	ldr	r1, [pc, #440]	; (8003a64 <_printf_i+0x238>)
 80038aa:	e064      	b.n	8003976 <_printf_i+0x14a>
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80038b2:	1d11      	adds	r1, r2, #4
 80038b4:	6019      	str	r1, [r3, #0]
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038bc:	2301      	movs	r3, #1
 80038be:	e0a3      	b.n	8003a08 <_printf_i+0x1dc>
 80038c0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80038c4:	f102 0104 	add.w	r1, r2, #4
 80038c8:	6019      	str	r1, [r3, #0]
 80038ca:	d0d7      	beq.n	800387c <_printf_i+0x50>
 80038cc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da03      	bge.n	80038dc <_printf_i+0xb0>
 80038d4:	222d      	movs	r2, #45	; 0x2d
 80038d6:	425b      	negs	r3, r3
 80038d8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038dc:	4962      	ldr	r1, [pc, #392]	; (8003a68 <_printf_i+0x23c>)
 80038de:	220a      	movs	r2, #10
 80038e0:	e017      	b.n	8003912 <_printf_i+0xe6>
 80038e2:	6820      	ldr	r0, [r4, #0]
 80038e4:	6819      	ldr	r1, [r3, #0]
 80038e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80038ea:	d003      	beq.n	80038f4 <_printf_i+0xc8>
 80038ec:	1d08      	adds	r0, r1, #4
 80038ee:	6018      	str	r0, [r3, #0]
 80038f0:	680b      	ldr	r3, [r1, #0]
 80038f2:	e006      	b.n	8003902 <_printf_i+0xd6>
 80038f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038f8:	f101 0004 	add.w	r0, r1, #4
 80038fc:	6018      	str	r0, [r3, #0]
 80038fe:	d0f7      	beq.n	80038f0 <_printf_i+0xc4>
 8003900:	880b      	ldrh	r3, [r1, #0]
 8003902:	4959      	ldr	r1, [pc, #356]	; (8003a68 <_printf_i+0x23c>)
 8003904:	2a6f      	cmp	r2, #111	; 0x6f
 8003906:	bf14      	ite	ne
 8003908:	220a      	movne	r2, #10
 800390a:	2208      	moveq	r2, #8
 800390c:	2000      	movs	r0, #0
 800390e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003912:	6865      	ldr	r5, [r4, #4]
 8003914:	60a5      	str	r5, [r4, #8]
 8003916:	2d00      	cmp	r5, #0
 8003918:	f2c0 809c 	blt.w	8003a54 <_printf_i+0x228>
 800391c:	6820      	ldr	r0, [r4, #0]
 800391e:	f020 0004 	bic.w	r0, r0, #4
 8003922:	6020      	str	r0, [r4, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d13f      	bne.n	80039a8 <_printf_i+0x17c>
 8003928:	2d00      	cmp	r5, #0
 800392a:	f040 8095 	bne.w	8003a58 <_printf_i+0x22c>
 800392e:	4675      	mov	r5, lr
 8003930:	2a08      	cmp	r2, #8
 8003932:	d10b      	bne.n	800394c <_printf_i+0x120>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	07da      	lsls	r2, r3, #31
 8003938:	d508      	bpl.n	800394c <_printf_i+0x120>
 800393a:	6923      	ldr	r3, [r4, #16]
 800393c:	6862      	ldr	r2, [r4, #4]
 800393e:	429a      	cmp	r2, r3
 8003940:	bfde      	ittt	le
 8003942:	2330      	movle	r3, #48	; 0x30
 8003944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003948:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800394c:	ebae 0305 	sub.w	r3, lr, r5
 8003950:	6123      	str	r3, [r4, #16]
 8003952:	f8cd 8000 	str.w	r8, [sp]
 8003956:	463b      	mov	r3, r7
 8003958:	aa03      	add	r2, sp, #12
 800395a:	4621      	mov	r1, r4
 800395c:	4630      	mov	r0, r6
 800395e:	f7ff feef 	bl	8003740 <_printf_common>
 8003962:	3001      	adds	r0, #1
 8003964:	d155      	bne.n	8003a12 <_printf_i+0x1e6>
 8003966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800396a:	b005      	add	sp, #20
 800396c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003970:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003974:	493c      	ldr	r1, [pc, #240]	; (8003a68 <_printf_i+0x23c>)
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800397e:	f100 0504 	add.w	r5, r0, #4
 8003982:	601d      	str	r5, [r3, #0]
 8003984:	d001      	beq.n	800398a <_printf_i+0x15e>
 8003986:	6803      	ldr	r3, [r0, #0]
 8003988:	e002      	b.n	8003990 <_printf_i+0x164>
 800398a:	0655      	lsls	r5, r2, #25
 800398c:	d5fb      	bpl.n	8003986 <_printf_i+0x15a>
 800398e:	8803      	ldrh	r3, [r0, #0]
 8003990:	07d0      	lsls	r0, r2, #31
 8003992:	bf44      	itt	mi
 8003994:	f042 0220 	orrmi.w	r2, r2, #32
 8003998:	6022      	strmi	r2, [r4, #0]
 800399a:	b91b      	cbnz	r3, 80039a4 <_printf_i+0x178>
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	f022 0220 	bic.w	r2, r2, #32
 80039a2:	6022      	str	r2, [r4, #0]
 80039a4:	2210      	movs	r2, #16
 80039a6:	e7b1      	b.n	800390c <_printf_i+0xe0>
 80039a8:	4675      	mov	r5, lr
 80039aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80039ae:	fb02 3310 	mls	r3, r2, r0, r3
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039b8:	4603      	mov	r3, r0
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d1f5      	bne.n	80039aa <_printf_i+0x17e>
 80039be:	e7b7      	b.n	8003930 <_printf_i+0x104>
 80039c0:	6808      	ldr	r0, [r1, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	6949      	ldr	r1, [r1, #20]
 80039c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80039ca:	d004      	beq.n	80039d6 <_printf_i+0x1aa>
 80039cc:	1d10      	adds	r0, r2, #4
 80039ce:	6018      	str	r0, [r3, #0]
 80039d0:	6813      	ldr	r3, [r2, #0]
 80039d2:	6019      	str	r1, [r3, #0]
 80039d4:	e007      	b.n	80039e6 <_printf_i+0x1ba>
 80039d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039da:	f102 0004 	add.w	r0, r2, #4
 80039de:	6018      	str	r0, [r3, #0]
 80039e0:	6813      	ldr	r3, [r2, #0]
 80039e2:	d0f6      	beq.n	80039d2 <_printf_i+0x1a6>
 80039e4:	8019      	strh	r1, [r3, #0]
 80039e6:	2300      	movs	r3, #0
 80039e8:	6123      	str	r3, [r4, #16]
 80039ea:	4675      	mov	r5, lr
 80039ec:	e7b1      	b.n	8003952 <_printf_i+0x126>
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	1d11      	adds	r1, r2, #4
 80039f2:	6019      	str	r1, [r3, #0]
 80039f4:	6815      	ldr	r5, [r2, #0]
 80039f6:	6862      	ldr	r2, [r4, #4]
 80039f8:	2100      	movs	r1, #0
 80039fa:	4628      	mov	r0, r5
 80039fc:	f7fc fbe8 	bl	80001d0 <memchr>
 8003a00:	b108      	cbz	r0, 8003a06 <_printf_i+0x1da>
 8003a02:	1b40      	subs	r0, r0, r5
 8003a04:	6060      	str	r0, [r4, #4]
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	6123      	str	r3, [r4, #16]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a10:	e79f      	b.n	8003952 <_printf_i+0x126>
 8003a12:	6923      	ldr	r3, [r4, #16]
 8003a14:	462a      	mov	r2, r5
 8003a16:	4639      	mov	r1, r7
 8003a18:	4630      	mov	r0, r6
 8003a1a:	47c0      	blx	r8
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d0a2      	beq.n	8003966 <_printf_i+0x13a>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	079b      	lsls	r3, r3, #30
 8003a24:	d507      	bpl.n	8003a36 <_printf_i+0x20a>
 8003a26:	2500      	movs	r5, #0
 8003a28:	f104 0919 	add.w	r9, r4, #25
 8003a2c:	68e3      	ldr	r3, [r4, #12]
 8003a2e:	9a03      	ldr	r2, [sp, #12]
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	429d      	cmp	r5, r3
 8003a34:	db05      	blt.n	8003a42 <_printf_i+0x216>
 8003a36:	68e0      	ldr	r0, [r4, #12]
 8003a38:	9b03      	ldr	r3, [sp, #12]
 8003a3a:	4298      	cmp	r0, r3
 8003a3c:	bfb8      	it	lt
 8003a3e:	4618      	movlt	r0, r3
 8003a40:	e793      	b.n	800396a <_printf_i+0x13e>
 8003a42:	2301      	movs	r3, #1
 8003a44:	464a      	mov	r2, r9
 8003a46:	4639      	mov	r1, r7
 8003a48:	4630      	mov	r0, r6
 8003a4a:	47c0      	blx	r8
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d08a      	beq.n	8003966 <_printf_i+0x13a>
 8003a50:	3501      	adds	r5, #1
 8003a52:	e7eb      	b.n	8003a2c <_printf_i+0x200>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1a7      	bne.n	80039a8 <_printf_i+0x17c>
 8003a58:	780b      	ldrb	r3, [r1, #0]
 8003a5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a62:	e765      	b.n	8003930 <_printf_i+0x104>
 8003a64:	0800402f 	.word	0x0800402f
 8003a68:	0800401e 	.word	0x0800401e

08003a6c <memcpy>:
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	1e43      	subs	r3, r0, #1
 8003a70:	440a      	add	r2, r1
 8003a72:	4291      	cmp	r1, r2
 8003a74:	d100      	bne.n	8003a78 <memcpy+0xc>
 8003a76:	bd10      	pop	{r4, pc}
 8003a78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a80:	e7f7      	b.n	8003a72 <memcpy+0x6>

08003a82 <memmove>:
 8003a82:	4288      	cmp	r0, r1
 8003a84:	b510      	push	{r4, lr}
 8003a86:	eb01 0302 	add.w	r3, r1, r2
 8003a8a:	d803      	bhi.n	8003a94 <memmove+0x12>
 8003a8c:	1e42      	subs	r2, r0, #1
 8003a8e:	4299      	cmp	r1, r3
 8003a90:	d10c      	bne.n	8003aac <memmove+0x2a>
 8003a92:	bd10      	pop	{r4, pc}
 8003a94:	4298      	cmp	r0, r3
 8003a96:	d2f9      	bcs.n	8003a8c <memmove+0xa>
 8003a98:	1881      	adds	r1, r0, r2
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	42d3      	cmn	r3, r2
 8003a9e:	d100      	bne.n	8003aa2 <memmove+0x20>
 8003aa0:	bd10      	pop	{r4, pc}
 8003aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aa6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003aaa:	e7f7      	b.n	8003a9c <memmove+0x1a>
 8003aac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ab0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ab4:	e7eb      	b.n	8003a8e <memmove+0xc>
	...

08003ab8 <_free_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	4605      	mov	r5, r0
 8003abc:	2900      	cmp	r1, #0
 8003abe:	d045      	beq.n	8003b4c <_free_r+0x94>
 8003ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac4:	1f0c      	subs	r4, r1, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bfb8      	it	lt
 8003aca:	18e4      	addlt	r4, r4, r3
 8003acc:	f000 f8d6 	bl	8003c7c <__malloc_lock>
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <_free_r+0x98>)
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	b933      	cbnz	r3, 8003ae6 <_free_r+0x2e>
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	6014      	str	r4, [r2, #0]
 8003adc:	4628      	mov	r0, r5
 8003ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ae2:	f000 b8cc 	b.w	8003c7e <__malloc_unlock>
 8003ae6:	42a3      	cmp	r3, r4
 8003ae8:	d90c      	bls.n	8003b04 <_free_r+0x4c>
 8003aea:	6821      	ldr	r1, [r4, #0]
 8003aec:	1862      	adds	r2, r4, r1
 8003aee:	4293      	cmp	r3, r2
 8003af0:	bf04      	itt	eq
 8003af2:	681a      	ldreq	r2, [r3, #0]
 8003af4:	685b      	ldreq	r3, [r3, #4]
 8003af6:	6063      	str	r3, [r4, #4]
 8003af8:	bf04      	itt	eq
 8003afa:	1852      	addeq	r2, r2, r1
 8003afc:	6022      	streq	r2, [r4, #0]
 8003afe:	6004      	str	r4, [r0, #0]
 8003b00:	e7ec      	b.n	8003adc <_free_r+0x24>
 8003b02:	4613      	mov	r3, r2
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	b10a      	cbz	r2, 8003b0c <_free_r+0x54>
 8003b08:	42a2      	cmp	r2, r4
 8003b0a:	d9fa      	bls.n	8003b02 <_free_r+0x4a>
 8003b0c:	6819      	ldr	r1, [r3, #0]
 8003b0e:	1858      	adds	r0, r3, r1
 8003b10:	42a0      	cmp	r0, r4
 8003b12:	d10b      	bne.n	8003b2c <_free_r+0x74>
 8003b14:	6820      	ldr	r0, [r4, #0]
 8003b16:	4401      	add	r1, r0
 8003b18:	1858      	adds	r0, r3, r1
 8003b1a:	4282      	cmp	r2, r0
 8003b1c:	6019      	str	r1, [r3, #0]
 8003b1e:	d1dd      	bne.n	8003adc <_free_r+0x24>
 8003b20:	6810      	ldr	r0, [r2, #0]
 8003b22:	6852      	ldr	r2, [r2, #4]
 8003b24:	605a      	str	r2, [r3, #4]
 8003b26:	4401      	add	r1, r0
 8003b28:	6019      	str	r1, [r3, #0]
 8003b2a:	e7d7      	b.n	8003adc <_free_r+0x24>
 8003b2c:	d902      	bls.n	8003b34 <_free_r+0x7c>
 8003b2e:	230c      	movs	r3, #12
 8003b30:	602b      	str	r3, [r5, #0]
 8003b32:	e7d3      	b.n	8003adc <_free_r+0x24>
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	1821      	adds	r1, r4, r0
 8003b38:	428a      	cmp	r2, r1
 8003b3a:	bf04      	itt	eq
 8003b3c:	6811      	ldreq	r1, [r2, #0]
 8003b3e:	6852      	ldreq	r2, [r2, #4]
 8003b40:	6062      	str	r2, [r4, #4]
 8003b42:	bf04      	itt	eq
 8003b44:	1809      	addeq	r1, r1, r0
 8003b46:	6021      	streq	r1, [r4, #0]
 8003b48:	605c      	str	r4, [r3, #4]
 8003b4a:	e7c7      	b.n	8003adc <_free_r+0x24>
 8003b4c:	bd38      	pop	{r3, r4, r5, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000168 	.word	0x20000168

08003b54 <_malloc_r>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	1ccd      	adds	r5, r1, #3
 8003b58:	f025 0503 	bic.w	r5, r5, #3
 8003b5c:	3508      	adds	r5, #8
 8003b5e:	2d0c      	cmp	r5, #12
 8003b60:	bf38      	it	cc
 8003b62:	250c      	movcc	r5, #12
 8003b64:	2d00      	cmp	r5, #0
 8003b66:	4606      	mov	r6, r0
 8003b68:	db01      	blt.n	8003b6e <_malloc_r+0x1a>
 8003b6a:	42a9      	cmp	r1, r5
 8003b6c:	d903      	bls.n	8003b76 <_malloc_r+0x22>
 8003b6e:	230c      	movs	r3, #12
 8003b70:	6033      	str	r3, [r6, #0]
 8003b72:	2000      	movs	r0, #0
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
 8003b76:	f000 f881 	bl	8003c7c <__malloc_lock>
 8003b7a:	4a23      	ldr	r2, [pc, #140]	; (8003c08 <_malloc_r+0xb4>)
 8003b7c:	6814      	ldr	r4, [r2, #0]
 8003b7e:	4621      	mov	r1, r4
 8003b80:	b991      	cbnz	r1, 8003ba8 <_malloc_r+0x54>
 8003b82:	4c22      	ldr	r4, [pc, #136]	; (8003c0c <_malloc_r+0xb8>)
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	b91b      	cbnz	r3, 8003b90 <_malloc_r+0x3c>
 8003b88:	4630      	mov	r0, r6
 8003b8a:	f000 f867 	bl	8003c5c <_sbrk_r>
 8003b8e:	6020      	str	r0, [r4, #0]
 8003b90:	4629      	mov	r1, r5
 8003b92:	4630      	mov	r0, r6
 8003b94:	f000 f862 	bl	8003c5c <_sbrk_r>
 8003b98:	1c43      	adds	r3, r0, #1
 8003b9a:	d126      	bne.n	8003bea <_malloc_r+0x96>
 8003b9c:	230c      	movs	r3, #12
 8003b9e:	6033      	str	r3, [r6, #0]
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f000 f86c 	bl	8003c7e <__malloc_unlock>
 8003ba6:	e7e4      	b.n	8003b72 <_malloc_r+0x1e>
 8003ba8:	680b      	ldr	r3, [r1, #0]
 8003baa:	1b5b      	subs	r3, r3, r5
 8003bac:	d41a      	bmi.n	8003be4 <_malloc_r+0x90>
 8003bae:	2b0b      	cmp	r3, #11
 8003bb0:	d90f      	bls.n	8003bd2 <_malloc_r+0x7e>
 8003bb2:	600b      	str	r3, [r1, #0]
 8003bb4:	50cd      	str	r5, [r1, r3]
 8003bb6:	18cc      	adds	r4, r1, r3
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f000 f860 	bl	8003c7e <__malloc_unlock>
 8003bbe:	f104 000b 	add.w	r0, r4, #11
 8003bc2:	1d23      	adds	r3, r4, #4
 8003bc4:	f020 0007 	bic.w	r0, r0, #7
 8003bc8:	1ac3      	subs	r3, r0, r3
 8003bca:	d01b      	beq.n	8003c04 <_malloc_r+0xb0>
 8003bcc:	425a      	negs	r2, r3
 8003bce:	50e2      	str	r2, [r4, r3]
 8003bd0:	bd70      	pop	{r4, r5, r6, pc}
 8003bd2:	428c      	cmp	r4, r1
 8003bd4:	bf0d      	iteet	eq
 8003bd6:	6863      	ldreq	r3, [r4, #4]
 8003bd8:	684b      	ldrne	r3, [r1, #4]
 8003bda:	6063      	strne	r3, [r4, #4]
 8003bdc:	6013      	streq	r3, [r2, #0]
 8003bde:	bf18      	it	ne
 8003be0:	460c      	movne	r4, r1
 8003be2:	e7e9      	b.n	8003bb8 <_malloc_r+0x64>
 8003be4:	460c      	mov	r4, r1
 8003be6:	6849      	ldr	r1, [r1, #4]
 8003be8:	e7ca      	b.n	8003b80 <_malloc_r+0x2c>
 8003bea:	1cc4      	adds	r4, r0, #3
 8003bec:	f024 0403 	bic.w	r4, r4, #3
 8003bf0:	42a0      	cmp	r0, r4
 8003bf2:	d005      	beq.n	8003c00 <_malloc_r+0xac>
 8003bf4:	1a21      	subs	r1, r4, r0
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f000 f830 	bl	8003c5c <_sbrk_r>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d0cd      	beq.n	8003b9c <_malloc_r+0x48>
 8003c00:	6025      	str	r5, [r4, #0]
 8003c02:	e7d9      	b.n	8003bb8 <_malloc_r+0x64>
 8003c04:	bd70      	pop	{r4, r5, r6, pc}
 8003c06:	bf00      	nop
 8003c08:	20000168 	.word	0x20000168
 8003c0c:	2000016c 	.word	0x2000016c

08003c10 <_realloc_r>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	4607      	mov	r7, r0
 8003c14:	4614      	mov	r4, r2
 8003c16:	460e      	mov	r6, r1
 8003c18:	b921      	cbnz	r1, 8003c24 <_realloc_r+0x14>
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c20:	f7ff bf98 	b.w	8003b54 <_malloc_r>
 8003c24:	b922      	cbnz	r2, 8003c30 <_realloc_r+0x20>
 8003c26:	f7ff ff47 	bl	8003ab8 <_free_r>
 8003c2a:	4625      	mov	r5, r4
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c30:	f000 f826 	bl	8003c80 <_malloc_usable_size_r>
 8003c34:	4284      	cmp	r4, r0
 8003c36:	d90f      	bls.n	8003c58 <_realloc_r+0x48>
 8003c38:	4621      	mov	r1, r4
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	f7ff ff8a 	bl	8003b54 <_malloc_r>
 8003c40:	4605      	mov	r5, r0
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d0f2      	beq.n	8003c2c <_realloc_r+0x1c>
 8003c46:	4631      	mov	r1, r6
 8003c48:	4622      	mov	r2, r4
 8003c4a:	f7ff ff0f 	bl	8003a6c <memcpy>
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4638      	mov	r0, r7
 8003c52:	f7ff ff31 	bl	8003ab8 <_free_r>
 8003c56:	e7e9      	b.n	8003c2c <_realloc_r+0x1c>
 8003c58:	4635      	mov	r5, r6
 8003c5a:	e7e7      	b.n	8003c2c <_realloc_r+0x1c>

08003c5c <_sbrk_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4c06      	ldr	r4, [pc, #24]	; (8003c78 <_sbrk_r+0x1c>)
 8003c60:	2300      	movs	r3, #0
 8003c62:	4605      	mov	r5, r0
 8003c64:	4608      	mov	r0, r1
 8003c66:	6023      	str	r3, [r4, #0]
 8003c68:	f000 f99e 	bl	8003fa8 <_sbrk>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d102      	bne.n	8003c76 <_sbrk_r+0x1a>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	b103      	cbz	r3, 8003c76 <_sbrk_r+0x1a>
 8003c74:	602b      	str	r3, [r5, #0]
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	200003e0 	.word	0x200003e0

08003c7c <__malloc_lock>:
 8003c7c:	4770      	bx	lr

08003c7e <__malloc_unlock>:
 8003c7e:	4770      	bx	lr

08003c80 <_malloc_usable_size_r>:
 8003c80:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003c84:	2800      	cmp	r0, #0
 8003c86:	f1a0 0004 	sub.w	r0, r0, #4
 8003c8a:	bfbc      	itt	lt
 8003c8c:	580b      	ldrlt	r3, [r1, r0]
 8003c8e:	18c0      	addlt	r0, r0, r3
 8003c90:	4770      	bx	lr

08003c92 <atan2f>:
 8003c92:	f000 b801 	b.w	8003c98 <__ieee754_atan2f>
	...

08003c98 <__ieee754_atan2f>:
 8003c98:	ee10 2a90 	vmov	r2, s1
 8003c9c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8003ca0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	eef0 7a40 	vmov.f32	s15, s0
 8003caa:	dc06      	bgt.n	8003cba <__ieee754_atan2f+0x22>
 8003cac:	ee10 0a10 	vmov	r0, s0
 8003cb0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003cb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003cb8:	dd04      	ble.n	8003cc4 <__ieee754_atan2f+0x2c>
 8003cba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8003cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc2:	bd10      	pop	{r4, pc}
 8003cc4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8003cc8:	d103      	bne.n	8003cd2 <__ieee754_atan2f+0x3a>
 8003cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cce:	f000 b891 	b.w	8003df4 <atanf>
 8003cd2:	1794      	asrs	r4, r2, #30
 8003cd4:	f004 0402 	and.w	r4, r4, #2
 8003cd8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8003cdc:	b943      	cbnz	r3, 8003cf0 <__ieee754_atan2f+0x58>
 8003cde:	2c02      	cmp	r4, #2
 8003ce0:	d033      	beq.n	8003d4a <__ieee754_atan2f+0xb2>
 8003ce2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003dc8 <__ieee754_atan2f+0x130>
 8003ce6:	2c03      	cmp	r4, #3
 8003ce8:	bf08      	it	eq
 8003cea:	eef0 7a47 	vmoveq.f32	s15, s14
 8003cee:	e7e6      	b.n	8003cbe <__ieee754_atan2f+0x26>
 8003cf0:	b941      	cbnz	r1, 8003d04 <__ieee754_atan2f+0x6c>
 8003cf2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003dcc <__ieee754_atan2f+0x134>
 8003cf6:	eddf 7a36 	vldr	s15, [pc, #216]	; 8003dd0 <__ieee754_atan2f+0x138>
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	bfb8      	it	lt
 8003cfe:	eef0 7a47 	vmovlt.f32	s15, s14
 8003d02:	e7dc      	b.n	8003cbe <__ieee754_atan2f+0x26>
 8003d04:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003d08:	d125      	bne.n	8003d56 <__ieee754_atan2f+0xbe>
 8003d0a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003d0e:	d112      	bne.n	8003d36 <__ieee754_atan2f+0x9e>
 8003d10:	2c02      	cmp	r4, #2
 8003d12:	d00a      	beq.n	8003d2a <__ieee754_atan2f+0x92>
 8003d14:	2c03      	cmp	r4, #3
 8003d16:	d00b      	beq.n	8003d30 <__ieee754_atan2f+0x98>
 8003d18:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003dd4 <__ieee754_atan2f+0x13c>
 8003d1c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8003dd8 <__ieee754_atan2f+0x140>
 8003d20:	2c01      	cmp	r4, #1
 8003d22:	bf18      	it	ne
 8003d24:	eef0 7a47 	vmovne.f32	s15, s14
 8003d28:	e7c9      	b.n	8003cbe <__ieee754_atan2f+0x26>
 8003d2a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8003ddc <__ieee754_atan2f+0x144>
 8003d2e:	e7c6      	b.n	8003cbe <__ieee754_atan2f+0x26>
 8003d30:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8003de0 <__ieee754_atan2f+0x148>
 8003d34:	e7c3      	b.n	8003cbe <__ieee754_atan2f+0x26>
 8003d36:	2c02      	cmp	r4, #2
 8003d38:	d007      	beq.n	8003d4a <__ieee754_atan2f+0xb2>
 8003d3a:	2c03      	cmp	r4, #3
 8003d3c:	d008      	beq.n	8003d50 <__ieee754_atan2f+0xb8>
 8003d3e:	2c01      	cmp	r4, #1
 8003d40:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003de4 <__ieee754_atan2f+0x14c>
 8003d44:	eddf 7a28 	vldr	s15, [pc, #160]	; 8003de8 <__ieee754_atan2f+0x150>
 8003d48:	e7eb      	b.n	8003d22 <__ieee754_atan2f+0x8a>
 8003d4a:	eddf 7a28 	vldr	s15, [pc, #160]	; 8003dec <__ieee754_atan2f+0x154>
 8003d4e:	e7b6      	b.n	8003cbe <__ieee754_atan2f+0x26>
 8003d50:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003dc8 <__ieee754_atan2f+0x130>
 8003d54:	e7b3      	b.n	8003cbe <__ieee754_atan2f+0x26>
 8003d56:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003d5a:	d0ca      	beq.n	8003cf2 <__ieee754_atan2f+0x5a>
 8003d5c:	1a5b      	subs	r3, r3, r1
 8003d5e:	15db      	asrs	r3, r3, #23
 8003d60:	2b3c      	cmp	r3, #60	; 0x3c
 8003d62:	dc1a      	bgt.n	8003d9a <__ieee754_atan2f+0x102>
 8003d64:	2a00      	cmp	r2, #0
 8003d66:	da01      	bge.n	8003d6c <__ieee754_atan2f+0xd4>
 8003d68:	333c      	adds	r3, #60	; 0x3c
 8003d6a:	db19      	blt.n	8003da0 <__ieee754_atan2f+0x108>
 8003d6c:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8003d70:	f000 f912 	bl	8003f98 <fabsf>
 8003d74:	f000 f83e 	bl	8003df4 <atanf>
 8003d78:	eef0 7a40 	vmov.f32	s15, s0
 8003d7c:	2c01      	cmp	r4, #1
 8003d7e:	d012      	beq.n	8003da6 <__ieee754_atan2f+0x10e>
 8003d80:	2c02      	cmp	r4, #2
 8003d82:	d017      	beq.n	8003db4 <__ieee754_atan2f+0x11c>
 8003d84:	2c00      	cmp	r4, #0
 8003d86:	d09a      	beq.n	8003cbe <__ieee754_atan2f+0x26>
 8003d88:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003df0 <__ieee754_atan2f+0x158>
 8003d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d90:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003dec <__ieee754_atan2f+0x154>
 8003d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d98:	e791      	b.n	8003cbe <__ieee754_atan2f+0x26>
 8003d9a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003dd0 <__ieee754_atan2f+0x138>
 8003d9e:	e7ed      	b.n	8003d7c <__ieee754_atan2f+0xe4>
 8003da0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8003de4 <__ieee754_atan2f+0x14c>
 8003da4:	e7ea      	b.n	8003d7c <__ieee754_atan2f+0xe4>
 8003da6:	ee17 3a90 	vmov	r3, s15
 8003daa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	e784      	b.n	8003cbe <__ieee754_atan2f+0x26>
 8003db4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003df0 <__ieee754_atan2f+0x158>
 8003db8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dbc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003dec <__ieee754_atan2f+0x154>
 8003dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dc4:	e77b      	b.n	8003cbe <__ieee754_atan2f+0x26>
 8003dc6:	bf00      	nop
 8003dc8:	c0490fdb 	.word	0xc0490fdb
 8003dcc:	bfc90fdb 	.word	0xbfc90fdb
 8003dd0:	3fc90fdb 	.word	0x3fc90fdb
 8003dd4:	3f490fdb 	.word	0x3f490fdb
 8003dd8:	bf490fdb 	.word	0xbf490fdb
 8003ddc:	4016cbe4 	.word	0x4016cbe4
 8003de0:	c016cbe4 	.word	0xc016cbe4
 8003de4:	00000000 	.word	0x00000000
 8003de8:	80000000 	.word	0x80000000
 8003dec:	40490fdb 	.word	0x40490fdb
 8003df0:	33bbbd2e 	.word	0x33bbbd2e

08003df4 <atanf>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	ee10 5a10 	vmov	r5, s0
 8003dfa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8003dfe:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8003e02:	eef0 7a40 	vmov.f32	s15, s0
 8003e06:	db10      	blt.n	8003e2a <atanf+0x36>
 8003e08:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003e0c:	dd04      	ble.n	8003e18 <atanf+0x24>
 8003e0e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8003e12:	eeb0 0a67 	vmov.f32	s0, s15
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8003f4c <atanf+0x158>
 8003e1c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003f50 <atanf+0x15c>
 8003e20:	2d00      	cmp	r5, #0
 8003e22:	bfc8      	it	gt
 8003e24:	eef0 7a47 	vmovgt.f32	s15, s14
 8003e28:	e7f3      	b.n	8003e12 <atanf+0x1e>
 8003e2a:	4b4a      	ldr	r3, [pc, #296]	; (8003f54 <atanf+0x160>)
 8003e2c:	429c      	cmp	r4, r3
 8003e2e:	dc10      	bgt.n	8003e52 <atanf+0x5e>
 8003e30:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8003e34:	da0a      	bge.n	8003e4c <atanf+0x58>
 8003e36:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003f58 <atanf+0x164>
 8003e3a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8003e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e42:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e4a:	dce2      	bgt.n	8003e12 <atanf+0x1e>
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e50:	e013      	b.n	8003e7a <atanf+0x86>
 8003e52:	f000 f8a1 	bl	8003f98 <fabsf>
 8003e56:	4b41      	ldr	r3, [pc, #260]	; (8003f5c <atanf+0x168>)
 8003e58:	429c      	cmp	r4, r3
 8003e5a:	dc4d      	bgt.n	8003ef8 <atanf+0x104>
 8003e5c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8003e60:	429c      	cmp	r4, r3
 8003e62:	dc3f      	bgt.n	8003ee4 <atanf+0xf0>
 8003e64:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8003e68:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003e6c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8003e70:	2300      	movs	r3, #0
 8003e72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003e76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003e80:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003f60 <atanf+0x16c>
 8003e84:	eddf 5a37 	vldr	s11, [pc, #220]	; 8003f64 <atanf+0x170>
 8003e88:	ed9f 5a37 	vldr	s10, [pc, #220]	; 8003f68 <atanf+0x174>
 8003e8c:	ee26 7a06 	vmul.f32	s14, s12, s12
 8003e90:	eee7 5a26 	vfma.f32	s11, s14, s13
 8003e94:	eddf 6a35 	vldr	s13, [pc, #212]	; 8003f6c <atanf+0x178>
 8003e98:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003e9c:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f70 <atanf+0x17c>
 8003ea0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8003ea4:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003f74 <atanf+0x180>
 8003ea8:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003eac:	eddf 5a32 	vldr	s11, [pc, #200]	; 8003f78 <atanf+0x184>
 8003eb0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8003eb4:	eddf 6a31 	vldr	s13, [pc, #196]	; 8003f7c <atanf+0x188>
 8003eb8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8003ebc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8003f80 <atanf+0x18c>
 8003ec0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8003ec4:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 8003f84 <atanf+0x190>
 8003ec8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8003ecc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8003f88 <atanf+0x194>
 8003ed0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8003ed4:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003ed8:	ee05 7a86 	vmla.f32	s14, s11, s12
 8003edc:	d121      	bne.n	8003f22 <atanf+0x12e>
 8003ede:	eee7 7ac7 	vfms.f32	s15, s15, s14
 8003ee2:	e796      	b.n	8003e12 <atanf+0x1e>
 8003ee4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003ee8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003eec:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003ef6:	e7c0      	b.n	8003e7a <atanf+0x86>
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <atanf+0x198>)
 8003efa:	429c      	cmp	r4, r3
 8003efc:	dc0b      	bgt.n	8003f16 <atanf+0x122>
 8003efe:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8003f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f06:	eea0 7a27 	vfma.f32	s14, s0, s15
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f14:	e7b1      	b.n	8003e7a <atanf+0x86>
 8003f16:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003f1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e7ab      	b.n	8003e7a <atanf+0x86>
 8003f22:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <atanf+0x19c>)
 8003f24:	491b      	ldr	r1, [pc, #108]	; (8003f94 <atanf+0x1a0>)
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	441a      	add	r2, r3
 8003f2a:	440b      	add	r3, r1
 8003f2c:	edd3 6a00 	vldr	s13, [r3]
 8003f30:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8003f34:	2d00      	cmp	r5, #0
 8003f36:	ed92 7a00 	vldr	s14, [r2]
 8003f3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f42:	bfb8      	it	lt
 8003f44:	eef1 7a67 	vneglt.f32	s15, s15
 8003f48:	e763      	b.n	8003e12 <atanf+0x1e>
 8003f4a:	bf00      	nop
 8003f4c:	bfc90fdb 	.word	0xbfc90fdb
 8003f50:	3fc90fdb 	.word	0x3fc90fdb
 8003f54:	3edfffff 	.word	0x3edfffff
 8003f58:	7149f2ca 	.word	0x7149f2ca
 8003f5c:	3f97ffff 	.word	0x3f97ffff
 8003f60:	3c8569d7 	.word	0x3c8569d7
 8003f64:	3d4bda59 	.word	0x3d4bda59
 8003f68:	bd6ef16b 	.word	0xbd6ef16b
 8003f6c:	3d886b35 	.word	0x3d886b35
 8003f70:	3dba2e6e 	.word	0x3dba2e6e
 8003f74:	3e124925 	.word	0x3e124925
 8003f78:	3eaaaaab 	.word	0x3eaaaaab
 8003f7c:	bd15a221 	.word	0xbd15a221
 8003f80:	bd9d8795 	.word	0xbd9d8795
 8003f84:	bde38e38 	.word	0xbde38e38
 8003f88:	be4ccccd 	.word	0xbe4ccccd
 8003f8c:	401bffff 	.word	0x401bffff
 8003f90:	08004040 	.word	0x08004040
 8003f94:	08004050 	.word	0x08004050

08003f98 <fabsf>:
 8003f98:	ee10 3a10 	vmov	r3, s0
 8003f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fa0:	ee00 3a10 	vmov	s0, r3
 8003fa4:	4770      	bx	lr
	...

08003fa8 <_sbrk>:
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <_sbrk+0x14>)
 8003faa:	6819      	ldr	r1, [r3, #0]
 8003fac:	4602      	mov	r2, r0
 8003fae:	b909      	cbnz	r1, 8003fb4 <_sbrk+0xc>
 8003fb0:	4903      	ldr	r1, [pc, #12]	; (8003fc0 <_sbrk+0x18>)
 8003fb2:	6019      	str	r1, [r3, #0]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	4402      	add	r2, r0
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	4770      	bx	lr
 8003fbc:	20000170 	.word	0x20000170
 8003fc0:	200003e4 	.word	0x200003e4

08003fc4 <_init>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr

08003fd0 <_fini>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	bf00      	nop
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr
